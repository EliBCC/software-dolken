# This file was autogenerated by the modm cmake builder.
# Do not modify!

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE string "make build type sticky")

execute_process(COMMAND lbuild build WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

INCLUDE(scripts/toolchain.cmake)

PROJECT("dolken")

FILE(GLOB_RECURSE APP_STARTUP *.sx)
SET_SOURCE_FILES_PROPERTIES(${APP_STARTUP} PROPERTIES LANGUAGE CXX)

MACRO(GET_SOURCES OUTPUT SRC_DIR)
	FILE(GLOB_RECURSE ${OUTPUT} ${SRC_DIR}/*.c ${SRC_DIR}/*.cpp ${SRC_DIR}/*.h ${SRC_DIR}/*.hpp ${SRC_DIR}/*.sx)
ENDMACRO(GET_SOURCES)

MACRO(GET_CHILD_DIRS OUTPUT DIR)
	FILE(GLOB DIR_CONTENTS RELATIVE ${DIR} ${DIR}/*)
	SET(${OUTPUT} "")
	FOREACH(CHILD ${DIR_CONTENTS})
		IF(IS_DIRECTORY ${DIR}/${CHILD})
			LIST(APPEND ${OUTPUT} ${CHILD})
		ENDIF()

	ENDFOREACH()
ENDMACRO(GET_CHILD_DIRS)

GET_CHILD_DIRS(BOARD_NAMES ${CMAKE_CURRENT_SOURCE_DIR}/src/boards)

INCLUDE_DIRECTORIES(
	modm/ext
	modm/ext/cmsis/core
	modm/ext/cmsis/device
	modm/src
	src
)
INCLUDE_DIRECTORIES(SYSTEM include)

MESSAGE(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "Build dir: ${PROJECT_BINARY_DIR}")

SET(DEFAULT_HANDLER_SRC modm/src/modm/platform/core/default_handler.sx)

GET_SOURCES(MODM_SRC modm/src)
ADD_LIBRARY(modm OBJECT ${MODM_SRC})

GET_SOURCES(COMMON_SRC src/common)
ADD_LIBRARY(dolken OBJECT ${COMMON_SRC})

set(LAUNCH_JSON_ENTRIES "")

FOREACH(BOARD_NAME ${BOARD_NAMES})
	GET_SOURCES(BOARD_SRC src/boards/${BOARD_NAME})

	ADD_EXECUTABLE(${BOARD_NAME} ${BOARD_SRC})
	TARGET_LINK_LIBRARIES(${BOARD_NAME} dolken modm)
	SET_TARGET_PROPERTIES(${BOARD_NAME} PROPERTIES SUFFIX ".elf")

	IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		TARGET_COMPILE_DEFINITIONS(${BOARD_NAME} PUBLIC "MODM_DEBUG_BUILD")
	ENDIF()

	ADD_CUSTOM_COMMAND(TARGET ${BOARD_NAME} POST_BUILD COMMAND ${CMAKE_SIZE} ARGS ${BOARD_NAME}.elf)
	ADD_CUSTOM_COMMAND(TARGET ${BOARD_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY} -Oihex ${BOARD_NAME}.elf ${BOARD_NAME}.hex)
	ADD_CUSTOM_COMMAND(TARGET ${BOARD_NAME} POST_BUILD COMMAND ${CMAKE_OBJCOPY} -Obinary ${BOARD_NAME}.elf ${BOARD_NAME}.bin)
	ADD_CUSTOM_COMMAND(TARGET ${BOARD_NAME} POST_BUILD COMMAND ${CMAKE_OBJDUMP} -x -s -S -l -w ${BOARD_NAME}.elf > ${BOARD_NAME}.lss)

	ADD_CUSTOM_TARGET(upload-${BOARD_NAME} openocd -f "${PROJECT_SOURCE_DIR}/scripts/openocd.cfg" -c "program_file ${PROJECT_BINARY_DIR}/${BOARD_NAME}.elf" DEPENDS ${BOARD_NAME})

	MESSAGE(STATUS "added ${BOARD_NAME}")

	LIST(APPEND LAUNCH_JSON_ENTRIES "        {\n\
            \"type\": \"cortex-debug\",\n\
            \"request\": \"launch\",\n\
            \"servertype\": \"openocd\",\n\
            \"cwd\": \"\${workspaceRoot}\",\n\
            \"executable\": \"${PROJECT_BINARY_DIR}/${BOARD_NAME}.elf\",\n\
            \"name\": \"${BOARD_NAME} - ${CMAKE_BUILD_TYPE} Build\",\n\
            \"device\": \"STM32F446RE\",\n\
            \"configFiles\": [\"\${workspaceRoot}/scripts/openocd.cfg\"],\n\
        }")
ENDFOREACH()

ADD_CUSTOM_TARGET(modm-docs lbuild build -m ":docs" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
ADD_CUSTOM_TARGET(build-type ALL cmake -E echo "Build type: ${CMAKE_BUILD_TYPE}")

SET(LAUNCH_JSON "{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n")
LIST(JOIN LAUNCH_JSON_ENTRIES ",\n" LAUNCH_JSON_ENTRIES_JOINED)
STRING(APPEND LAUNCH_JSON ${LAUNCH_JSON_ENTRIES_JOINED} "\n    ]\n}\n")
FILE(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/.vscode/launch.json ${LAUNCH_JSON})

FILE(TOUCH ${PROJECT_BINARY_DIR}/stamp)
