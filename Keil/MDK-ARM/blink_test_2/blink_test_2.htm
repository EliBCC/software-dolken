<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [blink_test_2\blink_test_2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image blink_test_2\blink_test_2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Nov 14 16:47:26 2018
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__aeabi_unwind_cpp_pr0 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[135]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[135]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e]">ADC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream7_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[22]">EXTI0_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[23]">EXTI1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[24]">EXTI2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[25]">EXTI3_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[26]">EXTI4_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[20]">FLASH_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4e]">FMPI2C1_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4d]">FMPI2C1_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4b]">FPU_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4f]">LPTIM1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1d]">PVD_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[21]">RCC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4a]">RNG_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1f]">RTC_WKUP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[4c]">SPI5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f410rx.o(.text)
 <LI><a href="#[1e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[49]">USART6_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[1c]">WWDG_IRQHandler</a> from startup_stm32f410rx.o(.text) referenced from startup_stm32f410rx.o(RESET)
 <LI><a href="#[71]">ToggleBlink()</a> from sm_main_main.o(i._Z11ToggleBlinkv) referenced from sm_main_main.o(i._Z11ToggleBlinkv)
 <LI><a href="#[71]">ToggleBlink()</a> from sm_main_main.o(i._Z11ToggleBlinkv) referenced from sm_main_main.o(i._Z4Initv)
 <LI><a href="#[72]">__default_new_handler()</a> from newhandler.o(i._Z21__default_new_handlerv) referenced from new.o(i._Znwj)
 <LI><a href="#[73]">[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[74]">[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[57]">[local to unwinder_c]::EIT_comparator(const void*, const void*)</a> from unwinder.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[56]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[52]">[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</a> from arm_exceptions_throw.o(.text) referenced from arm_exceptions_throw.o(.text)
 <LI><a href="#[75]">JAE::Vector&lang;void(*)()&rang;::~Vector()</a> from jae.o(t._ZN3JAE6VectorIPFvvEED1Ev) referenced from jae.o(i.__sti___7_JAE_cpp_233f7419)
 <LI><a href="#[76]">JAE::Vector&lang;long&rang;::~Vector()</a> from jae.o(t._ZN3JAE6VectorIlED1Ev) referenced from jae.o(i.__sti___7_JAE_cpp_233f7419)
 <LI><a href="#[5d]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[5d]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[5d]">[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[5f]">[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_RxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[69]">[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_TxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[5e]">[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_RxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[68]">[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_TxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[5c]">[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[5c]">[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[5a]">[local to stm32f4xx_hal_spi_c]::SPI_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[67]">[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[64]">[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesRxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[65]">[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesTxISR_8BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[62]">[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesRxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[63]">[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesTxISR_16BITEP19__SPI_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[5b]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[5b]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[66]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[61]">[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[60]">[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6d]">[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[6d]">[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6c]">[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[6f]">[local to stm32f4xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMATxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[6b]">[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[6a]">[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[6e]">[local to stm32f4xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMATransmitCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[55]">__ARM::default_unexpected_handler()</a> from arm_exceptions_unexpected.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[77]">std::bad_typeid::~bad_typeid__deallocating()</a> from bad_typeid.o(i._ZNSt10bad_typeidD0Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[54]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[54]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from arm_exceptions_bad_typeid.o(.text)
 <LI><a href="#[78]">std::bad_exception::~bad_exception__deallocating()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[53]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[53]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from arm_exceptions_callunex.o(.text)
 <LI><a href="#[79]">std::bad_alloc::~bad_alloc__deallocating()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[70]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[70]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from newhandler.o(i._Z21__default_new_handlerv)
 <LI><a href="#[58]">__aeabi_unwind_cpp_pr0</a> from unwind_pr0.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[59]">__cxa_call_unexpected</a> from arm_exceptions_callunex.o(.text) referenced from unwind_prcommon.o(.text)
 <LI><a href="#[7c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f410rx.o(.text)
 <LI><a href="#[7a]">__sti___11_St_main_cpp_board</a> from st_main.o(i.__sti___11_St_main_cpp_board) referenced from st_main.o(.init_array)
 <LI><a href="#[7b]">__sti___7_JAE_cpp_233f7419</a> from jae.o(i.__sti___7_JAE_cpp_233f7419) referenced from jae.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[158]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[159]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[82]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[84]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[15b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[86]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[160]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[161]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[162]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[163]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[165]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[166]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[168]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[169]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[172]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[174]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[175]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[176]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[89]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[177]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*) &rArr; Init() &rArr; JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[178]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[90]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[179]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[92]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[94]"></a>__cxa_end_cleanup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arm_exceptions_cleanup.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[7]"></a>__ARM_Unwind_VRS_VFPpreserve_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>__ARM_Unwind_VRS_VFPpreserve_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[9]"></a>__ARM_Unwind_VRS_VFPrestore_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[a]"></a>__ARM_Unwind_VRS_VFPrestore_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[c5]"></a>__ARM_Unwind_VRS_corerestore</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>

<P><STRONG><a name="[97]"></a>_Unwind_RaiseException</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[96]"></a>_Unwind_Resume</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[ad]"></a>_Unwind_Activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unwind_activity.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[17a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FMPI2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FMPI2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f410rx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f410rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[17b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_JAE_cpp_233f7419
</UL>

<P><STRONG><a name="[151]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[9d]"></a>__cxa_allocate_exception</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::setDebugLine(UART_HandleTypeDef*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[a1]"></a>__cxa_end_catch</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, arm_exceptions_endcatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[a0]"></a>__ARM::call_terminate_handler(_Unwind_Control_Block*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[a6]"></a>__cxa_call_terminate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[a7]"></a>__cxa_begin_catch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, arm_exceptions_begincatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[aa]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[95]"></a>__ARM_cxa_end_cleanup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[ac]"></a>__cxa_throw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::setDebugLine(UART_HandleTypeDef*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[ae]"></a>__cxa_type_match</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator !=(const std::type_info&) const
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwind_pr0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __aeabi_unwind_cpp_pr0 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[9b]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[88]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[a4]"></a>__cxa_free_exception</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arm_exceptions_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_free_exception &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[a2]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::default_unexpected_handler()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[b9]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[9f]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[b7]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[ba]"></a>__ARM::same_exceptions_class(const void*, const void*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[a3]"></a>__ARM::is_foreign_exception(_Unwind_Control_Block*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[ab]"></a>__cxa_rethrow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_rethrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[59]"></a>__cxa_call_unexpected</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, arm_exceptions_callunex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = __cxa_call_unexpected &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwind_prcommon.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>__cxa_bad_typeid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arm_exceptions_bad_typeid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
</UL>

<P><STRONG><a name="[a8]"></a>__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_foreign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[9e]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[c8]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[c7]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[ca]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 272 bytes, Stack size 288 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[c4]"></a>__ARM_unwind_next_frame</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[98]"></a>__ARM_Unwind_RaiseException</STRONG> (Thumb, 206 bytes, Stack size 352 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[99]"></a>__ARM_Unwind_Resume</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, unwinder.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[a9]"></a>_Unwind_Complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _Unwind_Complete &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[a5]"></a>_Unwind_DeleteException</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unwind_delete.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[b3]"></a>__ARM_unwind_cpp_prcommon</STRONG> (Thumb, 1474 bytes, Stack size 96 bytes, unwind_prcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwind_pr_c]::next_unwind_byte(uwdata*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
</UL>

<P><STRONG><a name="[180]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[181]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c1]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[182]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cc]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[85]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ce]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[b8]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[c3]"></a>bsearch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>

<P><STRONG><a name="[bb]"></a>std::unexpected()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::unexpected() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[55]"></a>__ARM::default_unexpected_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __ARM::default_unexpected_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[8a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cb]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[8f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[cd]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[184]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d3]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d6]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[d7]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 292 bytes, Stack size 56 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_PollForTransfer), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[db]"></a>HAL_DMA_Start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[dd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[de]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[f4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_OUTPUT(const unsigned char&)
</UL>

<P><STRONG><a name="[13d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_PIN_DIGITAL(const unsigned char&)
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::TOGGLE_PIN(const unsigned char&)
</UL>

<P><STRONG><a name="[12f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_HIGH(const unsigned char&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_LOW(const unsigned char&)
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::boardInit()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::boardUpdate()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
</UL>

<P><STRONG><a name="[187]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTickFreq), UNUSED)

<P><STRONG><a name="[188]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTickPrio), UNUSED)

<P><STRONG><a name="[df]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_HalfDuplex_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[111]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
</UL>

<P><STRONG><a name="[e8]"></a>HAL_LIN_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_LIN_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_MspInit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e9]"></a>HAL_MultiProcessor_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_MultiProcessor_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[10b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[eb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[124]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[14d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ee]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 782 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[f1]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ef]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>

<P><STRONG><a name="[f2]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI1_Init()
</UL>

<P><STRONG><a name="[f3]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SPI_Receive</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>

<P><STRONG><a name="[f9]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>

<P><STRONG><a name="[145]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[149]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[fb]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
</UL>

<P><STRONG><a name="[f6]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[f8]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[fa]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[189]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT), UNUSED)

<P><STRONG><a name="[146]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14a]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[148]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14b]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[125]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[100]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>HAL_SetTickFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_SetTickFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(UART_HandleTypeDef*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[107]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(UART_HandleTypeDef*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART1_UART_Init()
</UL>

<P><STRONG><a name="[e0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_UART_Receive</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[10e]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[14e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(int)
</UL>

<P><STRONG><a name="[110]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[109]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f410rx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, st_main.o(i._Z10InitStMainP18UART_HandleTypeDefP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*) &rArr; Init() &rArr; JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::boardInit()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::setDebugLine(UART_HandleTypeDef*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::init()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_SPI_HANDEL(__SPI_HandleTypeDef*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkErrorType(int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>getPinName(const unsigned char&)</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, jae.o(i._Z10getPinNameRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = getPinName(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_PIN_DIGITAL(const unsigned char&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_OUTPUT(const unsigned char&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_HIGH(const unsigned char&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_LOW(const unsigned char&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::TOGGLE_PIN(const unsigned char&)
</UL>

<P><STRONG><a name="[71]"></a>ToggleBlink()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sm_main_main.o(i._Z11ToggleBlinkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = ToggleBlink() &rArr; JAE::TOGGLE_PIN(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::TOGGLE_PIN(const unsigned char&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sm_main_main.o(i._Z11ToggleBlinkv)
<LI> sm_main_main.o(i._Z4Initv)
</UL>
<P><STRONG><a name="[11d]"></a>getPinGroup(const unsigned char&)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, jae.o(i._Z11getPinGroupRKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_PIN_DIGITAL(const unsigned char&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_OUTPUT(const unsigned char&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_HIGH(const unsigned char&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_LOW(const unsigned char&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::TOGGLE_PIN(const unsigned char&)
</UL>

<P><STRONG><a name="[11f]"></a>UpdateStMain()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, st_main.o(i._Z12UpdateStMainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = UpdateStMain() &rArr; Update() &rArr; JAE::READ_MPU(unsigned char&) &rArr; JAE::DEACTIVATE_MPU() &rArr; JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::boardUpdate()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkErrorType(int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>checkErrorType(int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, st_main.o(i._Z14checkErrorTypei))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = checkErrorType(int) &rArr; Board::printDebug(char*) &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[123]"></a>SystemClock_Config()</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, main_1.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>__default_new_handler()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, newhandler.o(i._Z21__default_new_handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[118]"></a>Init()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sm_main_main.o(i._Z4Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Init() &rArr; JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::TOGGLE_PIN(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[122]"></a>Update()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sm_main_main.o(i._Z6Updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Update() &rArr; JAE::READ_MPU(unsigned char&) &rArr; JAE::DEACTIVATE_MPU() &rArr; JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_PIN_DIGITAL(const unsigned char&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_HIGH(const unsigned char&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_LOW(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
</UL>

<P><STRONG><a name="[11b]"></a>JAE::TOGGLE_PIN(const unsigned char&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, jae.o(i._ZN3JAE10TOGGLE_PINERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::TOGGLE_PIN(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleBlink()
</UL>

<P><STRONG><a name="[12c]"></a>JAE::SET_PIN_LOW(const unsigned char&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jae.o(i._ZN3JAE11SET_PIN_LOWERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::SET_PIN_LOW(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::ACTIVATE_MPU()
</UL>

<P><STRONG><a name="[137]"></a>JAE::ACTIVATE_MPU()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jae.o(i._ZN3JAE12ACTIVATE_MPUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::ACTIVATE_MPU() &rArr; JAE::SET_PIN_LOW(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_LOW(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
</UL>

<P><STRONG><a name="[12d]"></a>JAE::SET_PIN_HIGH(const unsigned char&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, jae.o(i._ZN3JAE12SET_PIN_HIGHERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::DEACTIVATE_MPU()
</UL>

<P><STRONG><a name="[11c]"></a>JAE::Callback_Delay(long, void(*)())</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, jae.o(i._ZN3JAE14Callback_DelayElPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = JAE::Callback_Delay(long, void(*)()) &rArr; Board::getBoard() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getCycleMillis()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToggleBlink()
</UL>

<P><STRONG><a name="[13b]"></a>JAE::DEACTIVATE_MPU()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jae.o(i._ZN3JAE14DEACTIVATE_MPUEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::DEACTIVATE_MPU() &rArr; JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_HIGH(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::init()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::READ_MPU(unsigned char&)
</UL>

<P><STRONG><a name="[13c]"></a>JAE::SET_PIN_OUTPUT(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE14SET_PIN_OUTPUTERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[116]"></a>JAE::SET_SPI_HANDEL(__SPI_HandleTypeDef*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jae.o(i._ZN3JAE14SET_SPI_HANDELEP19__SPI_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[12b]"></a>JAE::READ_PIN_DIGITAL(const unsigned char&)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, jae.o(i._ZN3JAE16READ_PIN_DIGITALERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = JAE::READ_PIN_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update()
</UL>

<P><STRONG><a name="[13e]"></a>JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE20SET_PIN_INPUT_ANALOGERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[128]"></a>JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE21SET_PIN_INPUT_DIGITALERKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
</UL>

<P><STRONG><a name="[13f]"></a>JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE27SET_PIN_INPUT_ANALOG_PULLUPERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[140]"></a>JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE28SET_PIN_INPUT_DIGITAL_PULLUPERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[141]"></a>JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE29SET_PIN_INPUT_ANALOG_PULLDOWNERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[142]"></a>JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, jae.o(i._ZN3JAE30SET_PIN_INPUT_DIGITAL_PULLDOWNERKh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::printDebug(char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinName(const unsigned char&)
</UL>

<P><STRONG><a name="[115]"></a>JAE::init()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jae.o(i._ZN3JAE4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::init() &rArr; JAE::DEACTIVATE_MPU() &rArr; JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::DEACTIVATE_MPU()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[121]"></a>JAE::update()</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, jae.o(i._ZN3JAE6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = JAE::update() &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getCycleMillis()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
</UL>

<P><STRONG><a name="[129]"></a>JAE::READ_MPU(unsigned char&)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jae.o(i._ZN3JAE8READ_MPUERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = JAE::READ_MPU(unsigned char&) &rArr; JAE::DEACTIVATE_MPU() &rArr; JAE::SET_PIN_HIGH(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::DEACTIVATE_MPU()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::ACTIVATE_MPU()
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
</UL>

<P><STRONG><a name="[117]"></a>Board::printDebug(char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, boardinfo.o(i._ZN5Board10printDebugEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Board::printDebug(char*) &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkErrorType(int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_OUTPUT(const unsigned char&)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
</UL>

<P><STRONG><a name="[12a]"></a>Board::printDebug(int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boardinfo.o(i._ZN5Board10printDebugEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Board::printDebug(int) &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
</UL>

<P><STRONG><a name="[120]"></a>Board::boardUpdate()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, boardinfo.o(i._ZN5Board11boardUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board::boardUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
</UL>

<P><STRONG><a name="[114]"></a>Board::setDebugLine(UART_HandleTypeDef*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boardinfo.o(i._ZN5Board12setDebugLineEP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Board::setDebugLine(UART_HandleTypeDef*) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[13a]"></a>Board::getCycleMillis()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, boardinfo.o(i._ZN5Board14getCycleMillisEv))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
</UL>

<P><STRONG><a name="[11e]"></a>Board::getBoard()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, boardinfo.o(i._ZN5Board8getBoardEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Board::getBoard() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::update()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_St_main_cpp_board
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLDOWN(const unsigned char&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLDOWN(const unsigned char&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL_PULLUP(const unsigned char&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG_PULLUP(const unsigned char&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_INPUT_ANALOG(const unsigned char&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::SET_PIN_OUTPUT(const unsigned char&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPinGroup(const unsigned char&)
</UL>

<P><STRONG><a name="[113]"></a>Board::boardInit()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, boardinfo.o(i._ZN5Board9boardInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board::boardInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[af]"></a>std::type_info::operator ==(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_eq.o(i._ZNKSt9type_infoeqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[b1]"></a>std::type_info::operator !=(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_ne.o(i._ZNKSt9type_infoneERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator !=(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[c0]"></a>std::bad_typeid::bad_typeid(const std::bad_typeid&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid(const std::bad_typeid&)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[18b]"></a>std::bad_typeid::bad_typeid__sub_object(const std::bad_typeid&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_), UNUSED)

<P><STRONG><a name="[bf]"></a>std::bad_typeid::bad_typeid()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid()
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[18c]"></a>std::bad_typeid::bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev), UNUSED)

<P><STRONG><a name="[77]"></a>std::bad_typeid::~bad_typeid__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_typeid::~bad_typeid__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[54]"></a>std::bad_typeid::~bad_typeid()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::~bad_typeid()
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_exceptions_bad_typeid.o(.text)
<LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[18d]"></a>std::bad_typeid::~bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev), UNUSED)

<P><STRONG><a name="[bd]"></a>std::bad_exception::bad_exception(const std::bad_exception&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception(const std::bad_exception&)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[18e]"></a>std::bad_exception::bad_exception__sub_object(const std::bad_exception&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[bc]"></a>std::bad_exception::bad_exception()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[18f]"></a>std::bad_exception::bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[78]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[53]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::~bad_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_exceptions_callunex.o(.text)
<LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[190]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[127]"></a>std::bad_alloc::bad_alloc(const std::bad_alloc&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[191]"></a>std::bad_alloc::bad_alloc__sub_object(const std::bad_alloc&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_), UNUSED)

<P><STRONG><a name="[126]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc()
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[192]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev), UNUSED)

<P><STRONG><a name="[79]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[70]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::~bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
<LI> newhandler.o(i._Z21__default_new_handlerv)
</UL>
<P><STRONG><a name="[193]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev), UNUSED)

<P><STRONG><a name="[153]"></a>std::exception::exception(const std::exception&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>

<P><STRONG><a name="[194]"></a>std::exception::exception__sub_object(const std::exception&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[154]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>

<P><STRONG><a name="[195]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[139]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Vector&lang;long&rang;::~Vector()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Vector&lang;void(*)()&rang;::~Vector()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
</UL>

<P><STRONG><a name="[155]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
</UL>

<P><STRONG><a name="[138]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_JAE_cpp_233f7419
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JAE::Callback_Delay(long, void(*)())
</UL>

<P><STRONG><a name="[152]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_common_get_typeid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arm_exceptions_throw.o(i.__ARM_common_get_typeid))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __ARM_common_get_typeid &rArr; __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[b2]"></a>__derived_to_base_conversion</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, rtti.o(i.__derived_to_base_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[157]"></a>__dynamic_cast</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, rtti.o(i.__dynamic_cast), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>

<P><STRONG><a name="[8e]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = main &rArr; InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*) &rArr; Init() &rArr; JAE::SET_PIN_INPUT_DIGITAL(const unsigned char&) &rArr; getPinGroup(const unsigned char&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateStMain()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStMain(UART_HandleTypeDef*, __SPI_HandleTypeDef*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_USART1_UART_Init()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_SPI1_Init()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[75]"></a>JAE::Vector&lang;void(*)()&rang;::~Vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jae.o(t._ZN3JAE6VectorIPFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JAE::Vector&lang;void(*)()&rang;::~Vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jae.o(i.__sti___7_JAE_cpp_233f7419)
</UL>
<P><STRONG><a name="[196]"></a>JAE::Vector&lang;void(*)()&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, jae.o(t._ZN3JAE6VectorIPFvvEED1Ev), UNUSED)

<P><STRONG><a name="[76]"></a>JAE::Vector&lang;long&rang;::~Vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, jae.o(t._ZN3JAE6VectorIlED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = JAE::Vector&lang;long&rang;::~Vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jae.o(i.__sti___7_JAE_cpp_233f7419)
</UL>
<P><STRONG><a name="[197]"></a>JAE::Vector&lang;long&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, jae.o(t._ZN3JAE6VectorIlED1Ev), UNUSED)

<P><STRONG><a name="[83]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[198]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[199]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12e]"></a>[local to main_c]::MX_GPIO_Init()</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, main_1.o(i._ZN23_INTERNAL_6_main_c_main12MX_GPIO_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to main_c]::MX_GPIO_Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>[local to main_c]::MX_SPI1_Init()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main_1.o(i._ZN23_INTERNAL_6_main_c_main12MX_SPI1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to main_c]::MX_SPI1_Init() &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>[local to main_c]::MX_USART1_UART_Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main_1.o(i._ZN23_INTERNAL_6_main_c_main19MX_USART1_UART_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to main_c]::MX_USART1_UART_Init() &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd12SPI_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[5f]"></a>[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_RxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[69]"></a>[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd14SPI_TxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[143]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_CloseRx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_RxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[144]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_CloseTx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_TxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[5e]"></a>[local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_RxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_RxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[68]"></a>[local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd15SPI_TxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_TxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[fd]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd17SPI_CheckFlag_BSYEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseTx_ISR(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[147]"></a>[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd17SPI_CloseRxTx_ISREP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)
</UL>

<P><STRONG><a name="[5c]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd18SPI_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[5a]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[67]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd19SPI_DMATransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitCplt(__DMA_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[64]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesRxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[65]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd20SPI_2linesTxISR_8BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_8BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[62]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesRxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesRxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[63]"></a>[local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd21SPI_2linesTxISR_16BITEP19__SPI_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_2linesTxISR_16BIT(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CloseRxTx_ISR(__SPI_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[5b]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_DMAHalfReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[66]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd23SPI_DMAHalfTransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[61]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd26SPI_DMATransmitReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMATransmitReceiveCplt(__DMA_HandleTypeDef*) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[fc]"></a>[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd29SPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_CheckFlag_BSY(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[60]"></a>[local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd30SPI_DMAHalfTransmitReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_DMAHalfTransmitReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(UART_HandleTypeDef*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[e1]"></a>[local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)</STRONG> (Thumb, 686 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f14UART_SetConfigEP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_SetConfig(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MultiProcessor_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
</UL>

<P><STRONG><a name="[106]"></a>[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f15UART_Receive_ITEP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(UART_HandleTypeDef*)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f16UART_Transmit_ITEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[6f]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMATxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMATxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[104]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(UART_HandleTypeDef*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndRxTransferEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[103]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(UART_HandleTypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndTxTransferEP18UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[6b]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[6a]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[6e]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMATransmitCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMATransmitCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[10d]"></a>[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f27UART_WaitOnFlagUntilTimeoutEP18UART_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[dc]"></a>[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[ea]"></a>[local to stm32f4xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc016NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[7a]"></a>__sti___11_St_main_cpp_board</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, st_main.o(i.__sti___11_St_main_cpp_board))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __sti___11_St_main_cpp_board &rArr; Board::getBoard() &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board::getBoard()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st_main.o(.init_array)
</UL>
<P><STRONG><a name="[7b]"></a>__sti___7_JAE_cpp_233f7419</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, jae.o(i.__sti___7_JAE_cpp_233f7419))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___7_JAE_cpp_233f7419 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jae.o(.init_array)
</UL>
<P><STRONG><a name="[52]"></a>[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*) &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_throw.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[74]"></a>[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[132]"></a>[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b021traverse_base_classesEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[134]"></a>[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b023find_base_class_at_addrEPvS0_PKSt9type_infoS3_Pi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
</UL>

<P><STRONG><a name="[133]"></a>[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b024get_virtual_base_pointerEPvPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[135]"></a>[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</STRONG> (Thumb, 476 bytes, Stack size 96 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b028derived_to_base_conversion_rEPvPS0_PKSt9type_infoS4_jPiiPS4_P19a_result_virtualityS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
</UL>

<P><STRONG><a name="[56]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>[local to unwinder_c]::EIT_comparator(const void*, const void*)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to unwinder_c]::EIT_comparator(const void*, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[c9]"></a>[local to unwind_pr_c]::next_unwind_byte(uwdata*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, unwind_prcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
