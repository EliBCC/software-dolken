<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="assert_8hpp" kind="file" language="C++">
    <compoundname>assert.hpp</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="architecture_2utils_8hpp" local="no">modm/architecture/utils.hpp</includes>
    <includes refid="bit__constants_8hpp" local="no">modm/utils/bit_constants.hpp</includes>
    <includes refid="accessor_8hpp" local="no">modm/architecture/interface/accessor.hpp</includes>
    <includedby refid="resumable_2macros_8hpp" local="no">C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing/resumable/macros.hpp</includedby>
    <incdepgraph>
      <node id="447">
        <label>stdarg.h</label>
      </node>
      <node id="437">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp</label>
        <link refid="assert_8hpp"/>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
      </node>
      <node id="438">
        <label>stdint.h</label>
      </node>
      <node id="446">
        <label>modm/io/iostream.hpp</label>
        <link refid="iostream_8hpp"/>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="440">
        <label>detect.hpp</label>
        <link refid="detect_8hpp"/>
      </node>
      <node id="445">
        <label>modm/architecture/interface/accessor_flash.hpp</label>
        <link refid="accessor__flash_8hpp"/>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>iodevice.hpp</label>
        <link refid="iodevice_8hpp"/>
      </node>
      <node id="441">
        <label>modm/utils/bit_constants.hpp</label>
        <link refid="bit__constants_8hpp"/>
        <childnode refid="438" relation="include">
        </childnode>
      </node>
      <node id="444">
        <label>cstddef</label>
      </node>
      <node id="439">
        <label>modm/architecture/utils.hpp</label>
        <link refid="architecture_2utils_8hpp"/>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>iodevice_wrapper.hpp</label>
        <link refid="iodevice__wrapper_8hpp"/>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>modm/architecture/interface/accessor_ram.hpp</label>
        <link refid="accessor__ram_8hpp"/>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
      </node>
      <node id="442">
        <label>modm/architecture/interface/accessor.hpp</label>
        <link refid="accessor_8hpp"/>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="450">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp</label>
        <link refid="assert_8hpp"/>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing/resumable/macros.hpp</label>
        <link refid="resumable_2macros_8hpp"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="460">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing/resumable/resumable.hpp</label>
        <link refid="resumable_2resumable_8hpp"/>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing.hpp</label>
        <link refid="processing_8hpp"/>
      </node>
      <node id="455">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/spi_master.hpp</label>
        <link refid="spi__master_8hpp"/>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
      </node>
      <node id="458">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/platform/spi/spi_master_2.hpp</label>
        <link refid="spi__master__2_8hpp"/>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="453">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing/resumable.hpp</label>
        <link refid="resumable_8hpp"/>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="452">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/processing/resumable/nested_resumable.hpp</label>
        <link refid="nested__resumable_8hpp"/>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="454">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/i2c_device.hpp</label>
        <link refid="i2c__device_8hpp"/>
      </node>
      <node id="457">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/platform.hpp</label>
        <link refid="platform_8hpp"/>
      </node>
      <node id="456">
        <label>C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/platform/spi/spi_master_1.hpp</label>
        <link refid="spi__master__1_8hpp"/>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemodm">modm</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modm__architecture__assert_1ga16bc9b4ebefe47d1417ec75f99b30ee6" prot="public" static="no">
        <name>MODM_ASSERTION_HANDLER</name>
        <param><defname>handler</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This adds a function to the list of assertion handlers to execute on assertion failure. Note that this macro does not give you any influence over the order of handler execution on assertion failure. Do not write assertion handlers that depend on any ordered execution!</para><para><simplesect kind="warning"><para>On AVR targets the failure identifier resides in Flash memory!</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A function of signature <computeroutput>AssertionHandler</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="57" column="9" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modm__architecture__assert_1gaa114a8966a537091056c29be69128d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure)</argsstring>
        <name>modm_assert</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier. This assert is always included in the source code. <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the failure identifier string is placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga30f972d5576059fc223eb1103fe410d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure, uintptr_t context)</argsstring>
        <name>modm_assert</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier and context. This assert is always included in the source code. <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the failure identifier string is placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga5550f5d2d8e1c93ea54dab9b3ceece0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert_debug</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure)</argsstring>
        <name>modm_assert_debug</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier. This assert is only triggered in the source code on debug builds! <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the strings are placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1gafc6fdce377db677c250069879e8b54d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm_assert_debug</definition>
        <argsstring>(bool condition, const char *module, const char *location, const char *failure, uintptr_t context)</argsstring>
        <name>modm_assert_debug</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assert a condition to be true with failure identifier and context. This assert is only triggered in the source code on debug builds! <simplesect kind="return"><para>result of condition evaluation</para></simplesect>
<simplesect kind="note"><para>On AVR targets the strings are placed in Flash memory! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__assert_1ga167476628ef21d7f3c88a79d7a90b7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm_abandon</definition>
        <argsstring>(const char *module, const char *location, const char *failure, uintptr_t context) modm_weak</argsstring>
        <name>modm_abandon</name>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>failure</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overwriteable abandonment handler for all targets.</para><para>You should overwrite this handler for custom failure behaviour like blinking LEDs and outputting the failure string via a serial connection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="116" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/assert.hpp"/>
  </compounddef>
</doxygen>
