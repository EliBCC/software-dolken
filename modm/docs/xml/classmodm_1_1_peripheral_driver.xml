<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classmodm_1_1_peripheral_driver" kind="class" language="C++" prot="public">
    <compoundname>modm::PeripheralDriver</compoundname>
    <derivedcompoundref refid="classmodm_1_1_can" prot="public" virt="non-virtual">modm::Can</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_i2c_master" prot="public" virt="non-virtual">modm::I2cMaster</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_spi_master" prot="public" virt="non-virtual">modm::SpiMaster</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1_uart" prot="public" virt="non-virtual">modm::Uart</derivedcompoundref>
    <includes refid="peripheral_8hpp" local="no">modm/architecture/interface/peripheral.hpp</includes>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a28e5941ca228fda3d45ae5097a9edfa4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::PeripheralDriver::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>initializes the peripheral, must be called before use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a9de8ccc55867591f1a05c97396c95eb5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::PeripheralDriver::configurePurpose</definition>
        <argsstring>()</argsstring>
        <name>configurePurpose</name>
        <briefdescription>
<para>configures a peripheral for a specific purpose </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1af467dcd36d963ed35f9790be088b8fb1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::PeripheralDriver::setParameter</definition>
        <argsstring>()</argsstring>
        <name>setParameter</name>
        <briefdescription>
<para>sets a parameter </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a9a6787f7f031709e6a43fd74c49205f2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::PeripheralDriver::getParameter</definition>
        <argsstring>()</argsstring>
        <name>getParameter</name>
        <briefdescription>
<para>returns a parameter </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a84a377f1e2def7339408fd60a2b0e3be" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::PeripheralDriver::getInterruptFlag</definition>
        <argsstring>()</argsstring>
        <name>getInterruptFlag</name>
        <briefdescription>
<para>Read an interrupt flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a3cfb9fa2621777790fb5ddd7235f503e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::PeripheralDriver::acknowledgeInterruptFlag</definition>
        <argsstring>()</argsstring>
        <name>acknowledgeInterruptFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acknowledge an interrupt flag.</para><para>We use acknowledge here, since it describes the intention rather than the actual implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="75" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
            <declname>available</declname>
            <defname>available</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>requested</declname>
            <defname>requested</defname>
          </param>
          <param>
            <type>uint16_t</type>
            <declname>tolerance</declname>
            <defname>tolerance</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::PeripheralDriver::assertBaudrateInTolerance</definition>
        <argsstring>()</argsstring>
        <name>assertBaudrateInTolerance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Since baudrates are usually generated by prescaling a system clock, only several distinct values can be generated. This method checks if the user requested baudrate is within error tolerance of the system achievable baudrate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="87" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" bodystart="87" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Peripheral class</para><para>This class acts as a base class for all classes describing the public interface of common peripheral drivers. As there is no implementation given, the classes specific to the platform inherit from their respective base classes and must shadow the methods of them.</para><para>The inheritance is only visible for the documentation, it is completely removed during compile time keeping a possible error at platform level. This is safe, because only one platform can be compiled at once.</para><para>This way, no virtual functions are needed and no overhead is generated, but we still have clean inheritance in the documentation. There is no need to document the platform specific implementation, since it is taken from the base class.</para><para><simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1141">
        <label>modm::platform::I2cMaster1</label>
        <link refid="classmodm_1_1platform_1_1_i2c_master1"/>
        <childnode refid="1140" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1142">
        <label>modm::platform::I2cMaster2</label>
        <link refid="classmodm_1_1platform_1_1_i2c_master2"/>
        <childnode refid="1140" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1138">
        <label>modm::Can</label>
        <link refid="classmodm_1_1_can"/>
        <childnode refid="1137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1140">
        <label>modm::I2cMaster</label>
        <link refid="classmodm_1_1_i2c_master"/>
        <childnode refid="1137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1137">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="1147">
        <label>modm::platform::Usart1</label>
        <link refid="classmodm_1_1platform_1_1_usart1"/>
        <childnode refid="1146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1148">
        <label>modm::platform::Usart2</label>
        <link refid="classmodm_1_1platform_1_1_usart2"/>
        <childnode refid="1146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1144">
        <label>modm::platform::SpiMaster1</label>
        <link refid="classmodm_1_1platform_1_1_spi_master1"/>
        <childnode refid="1143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1145">
        <label>modm::platform::SpiMaster2</label>
        <link refid="classmodm_1_1platform_1_1_spi_master2"/>
        <childnode refid="1143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1139">
        <label>modm::platform::Can1</label>
        <link refid="classmodm_1_1platform_1_1_can1"/>
        <childnode refid="1138" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1146">
        <label>modm::Uart</label>
        <link refid="classmodm_1_1_uart"/>
        <childnode refid="1137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1143">
        <label>modm::SpiMaster</label>
        <link refid="classmodm_1_1_spi_master"/>
        <childnode refid="1137" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" line="46" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/peripheral.hpp" bodystart="45" bodyend="92"/>
    <listofallmembers>
      <member refid="classmodm_1_1_peripheral_driver_1a3cfb9fa2621777790fb5ddd7235f503e" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>acknowledgeInterruptFlag</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>assertBaudrateInTolerance</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a9de8ccc55867591f1a05c97396c95eb5" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>configurePurpose</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a84a377f1e2def7339408fd60a2b0e3be" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>getInterruptFlag</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a9a6787f7f031709e6a43fd74c49205f2" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>getParameter</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1a28e5941ca228fda3d45ae5097a9edfa4" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_peripheral_driver_1af467dcd36d963ed35f9790be088b8fb1" prot="private" virt="non-virtual"><scope>modm::PeripheralDriver</scope><name>setParameter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
