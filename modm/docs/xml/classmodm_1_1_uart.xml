<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classmodm_1_1_uart" kind="class" language="C++" prot="public">
    <compoundname>modm::Uart</compoundname>
    <basecompoundref refid="classmodm_1_1_peripheral_driver" prot="public" virt="non-virtual">modm::PeripheralDriver</basecompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_usart1" prot="public" virt="non-virtual">modm::platform::Usart1</derivedcompoundref>
    <derivedcompoundref refid="classmodm_1_1platform_1_1_usart2" prot="public" virt="non-virtual">modm::platform::Usart2</derivedcompoundref>
    <includes refid="uart_8hpp" local="no">modm/architecture/interface/uart.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0" prot="public" static="no" strong="no">
        <type>uint32_t</type>
        <name>Baudrate</name>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0aa8624446f0ddaf0af752669484a0bc75" prot="public">
          <name>B300</name>
          <initializer>=     300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a81c326634954f134382f7524ef2116ee" prot="public">
          <name>B600</name>
          <initializer>=     600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adb5e75b2e45dfb1e316cfc95cd12c21e" prot="public">
          <name>B1200</name>
          <initializer>=    1200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a58fca46588de3baf569f114f3897c091" prot="public">
          <name>B1800</name>
          <initializer>=    1800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a34fbcb9e42e1d75ba89bdec667981813" prot="public">
          <name>B2400</name>
          <initializer>=    2400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adbc8afa89adb698ab563c39c73c753ba" prot="public">
          <name>B4800</name>
          <initializer>=    4800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a37f4d954ac3abea7cbe02ce6037ca6d4" prot="public">
          <name>B9600</name>
          <initializer>=    9600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a26c23f61418462ed949df5b738ec9b81" prot="public">
          <name>B14400</name>
          <initializer>=   14400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0ad7dd5711dc7f47b91cfffef3b22a0eac" prot="public">
          <name>B19200</name>
          <initializer>=   19200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adb0ac706a5fe97b17df9890267e8138d" prot="public">
          <name>B28800</name>
          <initializer>=   28800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0ab884f5025d0734e3f6b401931f18dd29" prot="public">
          <name>B38400</name>
          <initializer>=   38400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0af14e0c1e43d7aeb6741d90a7ba78444a" prot="public">
          <name>B57600</name>
          <initializer>=   57600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0af21ef91f5fb886a95c21083d13cba417" prot="public">
          <name>B76800</name>
          <initializer>=   76800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a70ddfeda6ec96e7d191735987b1c6c79" prot="public">
          <name>B115200</name>
          <initializer>=  115200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a2aa23eda423fea97cf334b01ec8231f2" prot="public">
          <name>B230400</name>
          <initializer>=  230400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a95095fb00f2e967f07508f58df01705f" prot="public">
          <name>B250000</name>
          <initializer>=  250000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a9a79abc00903fec3fba5863bcf0eaad4" prot="public">
          <name>kBps250</name>
          <initializer>=  250000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a67763fd5702f4c11ea9abe7c2fb149b7" prot="public">
          <name>B500000</name>
          <initializer>=  500000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a5efd6fc6a5d3866096d58b71fedd77e1" prot="public">
          <name>kBps500</name>
          <initializer>=  500000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0aa1d9c6947191649c499108ec3905f12f" prot="public">
          <name>B1000000</name>
          <initializer>= 1000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a399e9b01dd21af87d666b2749c312cd8" prot="public">
          <name>MBps1</name>
          <initializer>= 1000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Commonly used baudrates.</para><para>Most Serial-to-USB converters only support baudrates up to 115200 Baud </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="41" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" bodystart="39" bodyend="65"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmodm_1_1_uart_1a97fdbe2c458756585be8e960facc69cc" prot="public" static="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t modm::Uart::RxBufferSize</definition>
        <argsstring></argsstring>
        <name>RxBufferSize</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Size of the receive buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="70" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmodm_1_1_uart_1a7f0cadcc58c9df740356866b44f20f51" prot="public" static="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t modm::Uart::TxBufferSize</definition>
        <argsstring></argsstring>
        <name>TxBufferSize</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>Size of the transmit buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="73" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmodm_1_1_uart_1aa04c6a1afbfb99eb8cd4d0b8d4e004d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Signals</declname>
            <defname>Signals</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::Uart::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect GPIOs to the peripheral and configure them.</para><para>This configures the Tx and Rx signals as output and input and connects them.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Signals</parametername>
</parameternamelist>
<parameterdescription>
<para>One Tx and one Rx signal are required and can be passed out-of-order. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a3efec27dfb4b49dcc5887e5cdf9e1566" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SystemClock</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>baudrate</declname>
            <defname>baudrate</defname>
          </param>
          <param>
            <type>uint16_t</type>
            <declname>tolerance</declname>
            <defname>tolerance</defname>
            <defval><ref refid="classmodm_1_1_tolerance_1accab2e94e360437a5f35491641e61756" kindref="member">Tolerance::OnePercent</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void modm::Uart::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the hardware and sets the baudrate.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SystemClock</parametername>
</parameternamelist>
<parameterdescription>
<para>the currently active system clock </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>desired baud rate in Hz </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>the allowed absolute tolerance for the resulting baudrate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1aa82c55290bee66eb67371ae766295c16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Uart::writeBlocking</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>writeBlocking</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a single byte and wait for completion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a1852cf2c9a2f94f7c9d17de8c4dfc512" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Uart::writeBlocking</definition>
        <argsstring>(const uint8_t *data, std::size_t length)</argsstring>
        <name>writeBlocking</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Write a block of bytes and wait for completion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a30fff9ba83c7b3e5158c4d35c6a02820" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void modm::Uart::flushWriteBuffer</definition>
        <argsstring>()</argsstring>
        <name>flushWriteBuffer</name>
        <briefdescription>
<para>Flush the write buffer, waits in a while loop until <computeroutput><ref refid="classmodm_1_1_uart_1a4512a89aecf6241a033245da68b1a6de" kindref="member">isWriteFinished()</ref></computeroutput> returns <computeroutput>true</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1aad3082ddb3d0ec60eae00f3685050e73" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::Uart::write</definition>
        <argsstring>(uint8_t data)</argsstring>
        <name>write</name>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes a single byte into the buffer.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if data has been buffered, <computeroutput>false</computeroutput> if buffer is full </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1ad5732d1a675304db9a701cd30dc8c0cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t modm::Uart::write</definition>
        <argsstring>(const uint8_t *data, std::size_t length)</argsstring>
        <name>write</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes a block of bytes into the buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer big enough to store <computeroutput>length</computeroutput> bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be written</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes pushed into the buffer, maximal <computeroutput>length</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a4512a89aecf6241a033245da68b1a6de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::Uart::isWriteFinished</definition>
        <argsstring>()</argsstring>
        <name>isWriteFinished</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the buffer is empty and the last byte has been sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a072575ea6f63a4d41809b2500a8c973d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool modm::Uart::read</definition>
        <argsstring>(uint8_t &amp;data)</argsstring>
        <name>read</name>
        <param>
          <type>uint8_t &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a single byte.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte read, if any</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if a byte was received, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1ab2ec62c7036f712ed2e17dc1ddaca836" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t modm::Uart::read</definition>
        <argsstring>(uint8_t *data, std::size_t length)</argsstring>
        <name>read</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a block of bytes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer big enough to store <computeroutput>length</computeroutput> bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes which could be read, maximal <computeroutput>length</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1a14bb603f4d085a08387350d16c8ddedd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t modm::Uart::discardReceiveBuffer</definition>
        <argsstring>()</argsstring>
        <name>discardReceiveBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the receive FIFO queue and hardware buffer.</para><para><simplesect kind="return"><para>the size of the deleted FIFO queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1_uart_1add6e5d2048ff92c9950fea8ee604f917" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t modm::Uart::discardTransmitBuffer</definition>
        <argsstring>()</argsstring>
        <name>discardTransmitBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the transmit FIFO queue and hardware buffer.</para><para><simplesect kind="return"><para>the size of the deleted FIFO queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="179" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface of an <ref refid="classmodm_1_1_uart" kindref="compound">Uart</ref>.</para><para>Asynchronous and synchronous, buffered access to the <ref refid="classmodm_1_1_uart" kindref="compound">Uart</ref>.</para><para><simplesect kind="author"><para>Niklas Hauser </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1273">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="1274">
        <label>modm::platform::Usart1</label>
        <link refid="classmodm_1_1platform_1_1_usart1"/>
        <childnode refid="1272" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1275">
        <label>modm::platform::Usart2</label>
        <link refid="classmodm_1_1platform_1_1_usart2"/>
        <childnode refid="1272" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1272">
        <label>modm::Uart</label>
        <link refid="classmodm_1_1_uart"/>
        <childnode refid="1273" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1277">
        <label>modm::PeripheralDriver</label>
        <link refid="classmodm_1_1_peripheral_driver"/>
      </node>
      <node id="1276">
        <label>modm::Uart</label>
        <link refid="classmodm_1_1_uart"/>
        <childnode refid="1277" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" line="32" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/architecture/interface/uart.hpp" bodystart="31" bodyend="181"/>
    <listofallmembers>
      <member refid="classmodm_1_1_peripheral_driver_1a5c336ff9889c347e7eadb810bf984ebd" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>assertBaudrateInTolerance</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0aa1d9c6947191649c499108ec3905f12f" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B1000000</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a70ddfeda6ec96e7d191735987b1c6c79" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B115200</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adb5e75b2e45dfb1e316cfc95cd12c21e" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B1200</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a26c23f61418462ed949df5b738ec9b81" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B14400</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a58fca46588de3baf569f114f3897c091" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B1800</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0ad7dd5711dc7f47b91cfffef3b22a0eac" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B19200</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a2aa23eda423fea97cf334b01ec8231f2" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B230400</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a34fbcb9e42e1d75ba89bdec667981813" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B2400</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a95095fb00f2e967f07508f58df01705f" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B250000</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adb0ac706a5fe97b17df9890267e8138d" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B28800</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0aa8624446f0ddaf0af752669484a0bc75" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B300</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0ab884f5025d0734e3f6b401931f18dd29" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B38400</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0adbc8afa89adb698ab563c39c73c753ba" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B4800</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a67763fd5702f4c11ea9abe7c2fb149b7" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B500000</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0af14e0c1e43d7aeb6741d90a7ba78444a" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B57600</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a81c326634954f134382f7524ef2116ee" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B600</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0af21ef91f5fb886a95c21083d13cba417" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B76800</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a37f4d954ac3abea7cbe02ce6037ca6d4" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>B9600</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>Baudrate</name></member>
      <member refid="classmodm_1_1_uart_1aa04c6a1afbfb99eb8cd4d0b8d4e004d8" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>connect</name></member>
      <member refid="classmodm_1_1_uart_1a14bb603f4d085a08387350d16c8ddedd" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>discardReceiveBuffer</name></member>
      <member refid="classmodm_1_1_uart_1add6e5d2048ff92c9950fea8ee604f917" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>discardTransmitBuffer</name></member>
      <member refid="classmodm_1_1_uart_1a30fff9ba83c7b3e5158c4d35c6a02820" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>flushWriteBuffer</name></member>
      <member refid="classmodm_1_1_uart_1a3efec27dfb4b49dcc5887e5cdf9e1566" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>initialize</name></member>
      <member refid="classmodm_1_1_uart_1a4512a89aecf6241a033245da68b1a6de" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>isWriteFinished</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a9a79abc00903fec3fba5863bcf0eaad4" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>kBps250</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a5efd6fc6a5d3866096d58b71fedd77e1" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>kBps500</name></member>
      <member refid="classmodm_1_1_uart_1a996192afb0856d933a86a902fcf463d0a399e9b01dd21af87d666b2749c312cd8" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>MBps1</name></member>
      <member refid="classmodm_1_1_uart_1a072575ea6f63a4d41809b2500a8c973d" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>read</name></member>
      <member refid="classmodm_1_1_uart_1ab2ec62c7036f712ed2e17dc1ddaca836" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>read</name></member>
      <member refid="classmodm_1_1_uart_1a97fdbe2c458756585be8e960facc69cc" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>RxBufferSize</name></member>
      <member refid="classmodm_1_1_uart_1a7f0cadcc58c9df740356866b44f20f51" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>TxBufferSize</name></member>
      <member refid="classmodm_1_1_uart_1aad3082ddb3d0ec60eae00f3685050e73" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>write</name></member>
      <member refid="classmodm_1_1_uart_1ad5732d1a675304db9a701cd30dc8c0cd" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>write</name></member>
      <member refid="classmodm_1_1_uart_1aa82c55290bee66eb67371ae766295c16" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>writeBlocking</name></member>
      <member refid="classmodm_1_1_uart_1a1852cf2c9a2f94f7c9d17de8c4dfc512" prot="public" virt="non-virtual"><scope>modm::Uart</scope><name>writeBlocking</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
