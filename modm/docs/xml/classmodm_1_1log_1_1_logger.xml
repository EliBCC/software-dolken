<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classmodm_1_1log_1_1_logger" kind="class" language="C++" prot="public">
    <compoundname>modm::log::Logger</compoundname>
    <basecompoundref refid="classmodm_1_1_i_o_stream" prot="public" virt="non-virtual">modm::IOStream</basecompoundref>
    <includes refid="logger_2logger_8hpp" local="no">modm/debug/logger/logger.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmodm_1_1log_1_1_logger_1a46f602d1482100890c136f692c0a7abd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>modm::log::Logger::Logger</definition>
        <argsstring>(::modm::IODevice &amp;outputDevice)</argsstring>
        <name>Logger</name>
        <param>
          <type>::<ref refid="classmodm_1_1_i_o_device" kindref="compound">modm::IODevice</ref> &amp;</type>
          <declname>outputDevice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" line="49" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1log_1_1_logger_1adbec87916751e9e96a41875209512157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1log_1_1_logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; modm::log::Logger::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Output forwarding. </para>        </briefdescription>
        <detaileddescription>
<para>We must use modm_always_inline here to prevent the generation of specialized functions for every type. Especially for strings this might cause a lot of code size bloat.</para><para>Example without modm_always_inline or only <computeroutput>inline:</computeroutput> <programlisting><codeline><highlight class="normal">$<sp/>scons<sp/>symbols<sp/>|<sp/>grep<sp/>&quot;Logger&quot;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">01049436<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[12]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[12])</highlight></codeline>
<codeline><highlight class="normal">01050808<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[13]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[13])</highlight></codeline>
<codeline><highlight class="normal">01050744<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[15]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[15])</highlight></codeline>
<codeline><highlight class="normal">01050792<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[16]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[16])</highlight></codeline>
<codeline><highlight class="normal">01050728<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[19]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[19])</highlight></codeline>
<codeline><highlight class="normal">01050760<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[22]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[22])</highlight></codeline>
<codeline><highlight class="normal">01050712<sp/>00000016<sp/>W<sp/>modm::log::Logger&amp;<sp/>modm::log::Logger::operator&lt;&lt;<sp/>&lt;char<sp/>[26]&gt;(char<sp/>const<sp/>(&amp;)<sp/>[26])</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para><para>With modm_always_inline all these functions are gone. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" line="78" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" bodystart="79" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmodm_1_1log_1_1_logger_1ae71e1f07029bf1f8b1e0f3e51dd33e05" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>modm::log::Logger::Logger</definition>
        <argsstring>(const Logger &amp;)</argsstring>
        <name>Logger</name>
        <param>
          <type>const <ref refid="classmodm_1_1log_1_1_logger" kindref="compound">Logger</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmodm_1_1log_1_1_logger_1a94b5a46bafffd999417d1d49b21b26d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1log_1_1_logger" kindref="compound">Logger</ref> &amp;</type>
        <definition>Logger&amp; modm::log::Logger::operator=</definition>
        <argsstring>(const Logger &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmodm_1_1log_1_1_logger" kindref="compound">Logger</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" line="89" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to the <ref refid="classmodm_1_1log_1_1_logger" kindref="compound">Logger</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>It is used by the macros defined below. This class overloads the shift-operator so that it is possible to write different message types to the logger.</para><para><simplesect kind="author"><para>Martin Rosekeit <ulink url="mailto:martin.rosekeit@rwth-aachen.de">martin.rosekeit@rwth-aachen.de</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1121">
        <label>modm::IOStream</label>
        <link refid="classmodm_1_1_i_o_stream"/>
      </node>
      <node id="1120">
        <label>modm::log::Logger</label>
        <link refid="classmodm_1_1log_1_1_logger"/>
        <childnode refid="1121" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1123">
        <label>modm::IOStream</label>
        <link refid="classmodm_1_1_i_o_stream"/>
      </node>
      <node id="1122">
        <label>modm::log::Logger</label>
        <link refid="classmodm_1_1log_1_1_logger"/>
        <childnode refid="1123" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" line="47" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/Software-dolken/modm/src/modm/debug/logger/logger.hpp" bodystart="46" bodyend="90"/>
    <listofallmembers>
      <member refid="classmodm_1_1_i_o_stream_1ab5a45629b6ac8a07828d31a417cae5f7" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>ascii</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a2ec24a2c020997b5704df1d9ac99264c" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>bin</name></member>
      <member refid="classmodm_1_1_i_o_stream_1af67d8029d874a9f778eef28069f1d9c2" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>eof</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a3610c83f827855e9ea103c85bf45069e" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>flush</name></member>
      <member refid="classmodm_1_1_i_o_stream_1aa0e3a3af8ec3a8d8d3f62e94845f319b" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>get</name></member>
      <member refid="classmodm_1_1_i_o_stream_1ad2386cdd6a5a0775039755c4f7ea18af" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>get</name></member>
      <member refid="classmodm_1_1_i_o_stream_1ac425933869efdb3fa5058b1b040b6001" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>get</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a067f916e909f11b5c149d72a27d60b16" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>hex</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a64057d140a21785681e4385c66795245" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>IOStream</name></member>
      <member refid="classmodm_1_1log_1_1_logger_1a46f602d1482100890c136f692c0a7abd" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>Logger</name></member>
      <member refid="classmodm_1_1log_1_1_logger_1ae71e1f07029bf1f8b1e0f3e51dd33e05" prot="private" virt="non-virtual"><scope>modm::log::Logger</scope><name>Logger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a49b0b8fa73cc3a280495b7675c02c63d" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>myfunc</name></member>
      <member refid="classmodm_1_1log_1_1_logger_1adbec87916751e9e96a41875209512157" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a7b0b488829c7138e74d16aefe47c61de" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a0668abdde6faee6d888afcfd69e59866" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a87f8239c773bcaeed5e820afe9e66655" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a0d9e320adda5f3bfda2118a8926dbf19" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a3691a160fcf337996e425f5a8ecb7a0b" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a394222692f31c79e71992be1759cd1c3" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a5630d8d3be85cc4c3f47e5e2c209567c" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a10e34d406b70c7bd66f5dc5a4cb5f10a" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1aa17d87bb40047f6f5fefa1463d8b96e0" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a762336f851f5a1b1d61acbdb13bd33bb" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a3592211c1196d0601d482d61c7cb424f" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a450c3c6d341e4b9745ac09427bcac199" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a496ce8b1ecebcce75d6347ccfc7c6365" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a3513a4b7719ce46a5e6dfc0312a80efd" prot="public" virt="non-virtual" ambiguityscope="modm::IOStream::"><scope>modm::log::Logger</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmodm_1_1log_1_1_logger_1a94b5a46bafffd999417d1d49b21b26d2" prot="private" virt="non-virtual"><scope>modm::log::Logger</scope><name>operator=</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a0a25e55734176869c30b779bd6b92eb7" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>printf</name></member>
      <member refid="classmodm_1_1_i_o_stream_1af52b1e90d3c9cf45a7549ef26b3e145f" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>vprintf</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a58090461890e8414dc84f0c860300f6a" prot="public" virt="non-virtual"><scope>modm::log::Logger</scope><name>write</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a3f40cd6d0a6cb866a5260a6a89bac45c" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeBin</name></member>
      <member refid="classmodm_1_1_i_o_stream_1adebab5541eb5e42bbf19348376cc210e" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeBin</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a861e3fe1e1ea08c5023737c50e30667f" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeFloat</name></member>
      <member refid="classmodm_1_1_i_o_stream_1aab161eac39561e7c1c9008ef2b00ce38" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeHex</name></member>
      <member refid="classmodm_1_1_i_o_stream_1afff8e68842ed4356f654a8c6f7da7eb6" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeHex</name></member>
      <member refid="classmodm_1_1_i_o_stream_1aec5b08eb9f646d300f3b38d7dab98d45" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeHexNibble</name></member>
      <member refid="classmodm_1_1_i_o_stream_1aaf078dad90fdcc4cf1800a889fe5f383" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1acc33197569042e9e16eb24be567f1058" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a338fca20bc6c8b2ae2cd6a5f1d6b9f5a" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a5afc2d3f981073de90f4a415fc004ce5" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1afcb72045183ed3845bbbffc3d014603d" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a99842ae475bb837bc6202a7aafbb493c" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeInteger</name></member>
      <member refid="classmodm_1_1_i_o_stream_1a6505249c007f738cf9fc15dba0239e83" prot="protected" virt="non-virtual"><scope>modm::log::Logger</scope><name>writeUnsignedInteger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
