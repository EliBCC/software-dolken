<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacemodm" kind="namespace" language="C++">
    <compoundname>modm</compoundname>
    <innerclass refid="structmodm_1_1_arithmetic_traits" prot="public">modm::ArithmeticTraits</innerclass>
    <innerclass refid="classmodm_1_1_block_allocator" prot="public">modm::BlockAllocator</innerclass>
    <innerclass refid="classmodm_1_1_bounded_deque" prot="public">modm::BoundedDeque</innerclass>
    <innerclass refid="classmodm_1_1_bounded_queue" prot="public">modm::BoundedQueue</innerclass>
    <innerclass refid="classmodm_1_1_bounded_stack" prot="public">modm::BoundedStack</innerclass>
    <innerclass refid="classmodm_1_1_can" prot="public">modm::Can</innerclass>
    <innerclass refid="classmodm_1_1_can_bit_timing" prot="public">modm::CanBitTiming</innerclass>
    <innerclass refid="classmodm_1_1_clock" prot="public">modm::Clock</innerclass>
    <innerclass refid="structmodm_1_1_configuration" prot="public">modm::Configuration</innerclass>
    <innerclass refid="classmodm_1_1_doubly_linked_list" prot="public">modm::DoublyLinkedList</innerclass>
    <innerclass refid="classmodm_1_1_dynamic_array" prot="public">modm::DynamicArray</innerclass>
    <innerclass refid="classmodm_1_1_error_report" prot="public">modm::ErrorReport</innerclass>
    <innerclass refid="structmodm_1_1_flags" prot="public">modm::Flags</innerclass>
    <innerclass refid="structmodm_1_1_flags_group_3_01_t_8_8_8_01_4" prot="public">modm::FlagsGroup&lt; T... &gt;</innerclass>
    <innerclass refid="structmodm_1_1_flags_operators" prot="public">modm::FlagsOperators</innerclass>
    <innerclass refid="classmodm_1_1_generic_periodic_timer" prot="public">modm::GenericPeriodicTimer</innerclass>
    <innerclass refid="classmodm_1_1_generic_timeout" prot="public">modm::GenericTimeout</innerclass>
    <innerclass refid="classmodm_1_1_generic_timestamp" prot="public">modm::GenericTimestamp</innerclass>
    <innerclass refid="structmodm_1_1_gpio" prot="public">modm::Gpio</innerclass>
    <innerclass refid="classmodm_1_1_gpio_input" prot="public">modm::GpioInput</innerclass>
    <innerclass refid="classmodm_1_1_gpio_i_o" prot="public">modm::GpioIO</innerclass>
    <innerclass refid="classmodm_1_1_gpio_output" prot="public">modm::GpioOutput</innerclass>
    <innerclass refid="classmodm_1_1_gpio_port" prot="public">modm::GpioPort</innerclass>
    <innerclass refid="structmodm_1_1_i2c" prot="public">modm::I2c</innerclass>
    <innerclass refid="classmodm_1_1_i2c_device" prot="public">modm::I2cDevice</innerclass>
    <innerclass refid="classmodm_1_1_i2c_master" prot="public">modm::I2cMaster</innerclass>
    <innerclass refid="classmodm_1_1_i2c_read_transaction" prot="public">modm::I2cReadTransaction</innerclass>
    <innerclass refid="classmodm_1_1_i2c_transaction" prot="public">modm::I2cTransaction</innerclass>
    <innerclass refid="classmodm_1_1_i2c_write_read_transaction" prot="public">modm::I2cWriteReadTransaction</innerclass>
    <innerclass refid="classmodm_1_1_i2c_write_transaction" prot="public">modm::I2cWriteTransaction</innerclass>
    <innerclass refid="classmodm_1_1_i_o_device" prot="public">modm::IODevice</innerclass>
    <innerclass refid="classmodm_1_1_i_o_device_wrapper" prot="public">modm::IODeviceWrapper</innerclass>
    <innerclass refid="classmodm_1_1_i_o_stream" prot="public">modm::IOStream</innerclass>
    <innerclass refid="classmodm_1_1_linked_list" prot="public">modm::LinkedList</innerclass>
    <innerclass refid="classmodm_1_1_nested_resumable" prot="public">modm::NestedResumable</innerclass>
    <innerclass refid="classmodm_1_1_pair" prot="public">modm::Pair</innerclass>
    <innerclass refid="classmodm_1_1_peripheral_driver" prot="public">modm::PeripheralDriver</innerclass>
    <innerclass refid="classmodm_1_1_queue" prot="public">modm::Queue</innerclass>
    <innerclass refid="structmodm_1_1_register" prot="public">modm::Register</innerclass>
    <innerclass refid="classmodm_1_1_resumable" prot="public">modm::Resumable</innerclass>
    <innerclass refid="structmodm_1_1_resumable_result" prot="public">modm::ResumableResult</innerclass>
    <innerclass refid="classmodm_1_1_smart_pointer" prot="public">modm::SmartPointer</innerclass>
    <innerclass refid="structmodm_1_1_spi" prot="public">modm::Spi</innerclass>
    <innerclass refid="classmodm_1_1_spi_master" prot="public">modm::SpiMaster</innerclass>
    <innerclass refid="classmodm_1_1_stack" prot="public">modm::Stack</innerclass>
    <innerclass refid="classmodm_1_1_task" prot="public">modm::Task</innerclass>
    <innerclass refid="classmodm_1_1_tolerance" prot="public">modm::Tolerance</innerclass>
    <innerclass refid="classmodm_1_1_uart" prot="public">modm::Uart</innerclass>
    <innerclass refid="structmodm_1_1unaligned__t" prot="public">modm::unaligned_t</innerclass>
    <innerclass refid="structmodm_1_1_value" prot="public">modm::Value</innerclass>
    <innernamespace refid="namespacemodm_1_1accessor">modm::accessor</innernamespace>
    <innernamespace refid="namespacemodm_1_1allocator">modm::allocator</innernamespace>
    <innernamespace refid="namespacemodm_1_1atomic">modm::atomic</innernamespace>
    <innernamespace refid="namespacemodm_1_1can">modm::can</innernamespace>
    <innernamespace refid="namespacemodm_1_1clock">modm::clock</innernamespace>
    <innernamespace refid="namespacemodm_1_1cortex">modm::cortex</innernamespace>
    <innernamespace refid="namespacemodm_1_1log">modm::log</innernamespace>
    <innernamespace refid="namespacemodm_1_1math">modm::math</innernamespace>
    <innernamespace refid="namespacemodm_1_1platform">modm::platform</innernamespace>
    <innernamespace refid="namespacemodm_1_1pt">modm::pt</innernamespace>
    <innernamespace refid="namespacemodm_1_1rf">modm::rf</innernamespace>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="group__modm__architecture__register_1gabd73ce6ec9b57c64d6f0a6205f023435" prot="public" static="no">
        <type><ref refid="structmodm_1_1_register" kindref="compound">Register</ref>&lt; uint8_t &gt;</type>
        <definition>using modm::Register8 = typedef Register&lt;uint8_t&gt;</definition>
        <argsstring></argsstring>
        <name>Register8</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_register" kindref="compound">Register</ref> class with 8-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="98" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__architecture__register_1ga40997210e0b33d038e50059246a6c35f" prot="public" static="no">
        <type><ref refid="structmodm_1_1_register" kindref="compound">Register</ref>&lt; uint16_t &gt;</type>
        <definition>using modm::Register16 = typedef Register&lt;uint16_t&gt;</definition>
        <argsstring></argsstring>
        <name>Register16</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_register" kindref="compound">Register</ref> class with 16-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="99" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__architecture__register_1ga6e710bba1e576562f1b48d3fac68c3fd" prot="public" static="no">
        <type><ref refid="structmodm_1_1_register" kindref="compound">Register</ref>&lt; uint32_t &gt;</type>
        <definition>using modm::Register32 = typedef Register&lt;uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>Register32</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_register" kindref="compound">Register</ref> class with 32-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="100" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="typedef" id="group__modm__architecture__register_1gacdf81ef59f08411232bb3e7c8be57762" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
            <defval>uint8_t</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref>&lt; Enum, uint8_t &gt;</type>
        <definition>using modm::Flags8 = typedef Flags&lt;Enum, uint8_t&gt;</definition>
        <argsstring></argsstring>
        <name>Flags8</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> class with 8-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="393" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__architecture__register_1ga5cddf799f2474c0da233eeb750474b18" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
            <defval>uint16_t</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref>&lt; Enum, uint16_t &gt;</type>
        <definition>using modm::Flags16 = typedef Flags&lt;Enum, uint16_t&gt;</definition>
        <argsstring></argsstring>
        <name>Flags16</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> class with 16-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="395" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__architecture__register_1ga4bbc612ddbc2cf239e7c5baeabfa8a0d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Enum</type>
            <defval>uint32_t</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref>&lt; Enum, uint32_t &gt;</type>
        <definition>using modm::Flags32 = typedef Flags&lt;Enum, uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>Flags32</name>
        <briefdescription>
<para><ref refid="structmodm_1_1_flags" kindref="compound">Flags</ref> class with 32-bit wide underlying type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" line="397" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/register.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__io_1gabe969be1dd7e086eae347fff42a13903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::flush</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>flush</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flushes the output stream. This manipulator simply calls the stream&apos;s <ref refid="group__modm__io_1gabe969be1dd7e086eae347fff42a13903" kindref="member">flush()</ref> member function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="474" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga25d1ec416bcd6a8b8d1d280c99fd2d55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::endl</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>endl</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="481" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaa3870b0cd1e55a28adf436bdd45d7eaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::bin</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>bin</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to binary style for <computeroutput>char</computeroutput> and <computeroutput>char*</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="488" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaf61485290089e35ac0a897af1c37d4f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::hex</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>hex</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to hexadecimal style for <computeroutput>char</computeroutput> and <computeroutput>char*</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="495" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga684e638463534cfdac4cb3f31faa35a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::ascii</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>ascii</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>set the output mode to ASCII style for <computeroutput>char</computeroutput> and <computeroutput>char*</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="502" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="502" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga95e54d2dc105f141b3319157b70e3648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::black</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>black</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
<para>Set the foreground colour on ANSI terminals. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="509" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="509" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gace81ca5d67327501c5d10daff12bccf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::red</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>red</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="520" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="520" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gaf1149fc714213a39df7fe1d7e82184dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::green</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>green</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="531" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="531" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga0ba66e273e02afe2b580a77315924c1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::yellow</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>yellow</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="542" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="542" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1gae6f479911a2706520d6355834b2fa7c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::blue</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>blue</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="553" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="553" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga3438c4139324e0ce05430b371995f885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::magenta</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>magenta</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="564" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="564" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga42c49cf650c6bba34cfd712dcea739c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::cyan</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>cyan</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="575" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="575" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__io_1ga1c7fa6a962b858dd5760b3c9e0a9edeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::white</definition>
        <argsstring>(IOStream &amp;ios)</argsstring>
        <name>white</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>ios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" line="586" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iostream.hpp" bodystart="586" bodyend="594"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__math__utils_1ga973d0e57eb4370f98cbd7bf685deb24c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::swap</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the two nibbles of a byte. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xab<sp/>=&gt;<sp/>0xba</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="38" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga76bafefd41e9954c8a95ef516947f019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::swap</definition>
        <argsstring>(uint8_t &amp;a, uint8_t &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type>uint8_t &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint8_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Exchange two byte. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="56" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0e50dc2ed3c5aeddc5b0f94bd850bbae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::swap</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the two bytes of a 16-bit integer. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xabcd<sp/>=&gt;<sp/>0xcdab</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="71" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="71" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7008c2fdf9c8b9cb4869979220cc221a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::swap</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>swap</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Exchange the four bytes of a 32-bit integer. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0xabcdefgh<sp/>=&gt;<sp/>0xghefcdab</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="108" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7e5ae44a5c76a8deaac54480dcaf1aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void modm::swap</definition>
        <argsstring>(int16_t &amp;a, int16_t &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type>int16_t &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int16_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="124" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf059b757726ddbd2bd65c5cde94ea191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t modm::bitReverse</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a byte. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">0b01110100<sp/>=&gt;<sp/>0b00101110</highlight></codeline>
</programlisting></para><para>15 clock cycles on an AVR, without call + return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="142" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="142" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga21d50f72ee3eea7c6cfec85c9960c049" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::bitReverse</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a 16-bit integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="164" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="164" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga9dde46a0dced1c1aabd0f169633540cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::bitReverse</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>bitReverse</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Reverse the bits in a 32-bit integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="188" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="188" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad8ca8a97b6f8b1f20e73ca32d717dcb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr int8_t</type>
        <definition>constexpr int8_t modm::leftmostBit</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>leftmostBit</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns position of leftmost bit at compile time. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>if no bit set in value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>position of leftmost bit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="220" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf87b61c94640fb831d3e5a4c4e5d5e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint8_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>        </briefdescription>
        <detaileddescription>
<para>16 clock cycles on an AVR, without call + return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad44c478120365254aa1ee9387ebf7e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint16_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint16_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>        </briefdescription>
        <detaileddescription>
<para>33 clock cycles on an AVR, without call + return. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gae0d037914bc24d4e7d9ef3bd7875c106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t modm::bitCount</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>bitCount</name>
        <param>
          <type>uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Count the number of bits set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/bit_operation.hpp" line="244" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__modm__math__utils_1ga301a273e20d9bd3f736d2f6167b0b14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::isBigEndian</definition>
        <argsstring>()</argsstring>
        <name>isBigEndian</name>
        <briefdescription>
<para>checks if current architecture is big endian </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="28" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7c894de412bf85a4aa1267d98fa4f54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool modm::isLittleEndian</definition>
        <argsstring>()</argsstring>
        <name>isLittleEndian</name>
        <briefdescription>
<para>checks if current architecture is little endian </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="35" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga74f1bba34ce161a34e3e4929c72c0b18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::fromLittleEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="42" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga89290bd7631981b82f9b7e73a8c8aefc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::fromLittleEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="52" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad94b4c4f7a73c242d4d4b3fac74942c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::fromLittleEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="58" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gae5427b8adba982dbfc90908a8c7cd2a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::fromLittleEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>fromLittleEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="68" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaccf0f6763e19980c7e13cc290efee8c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::fromBigEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="74" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga2f483f2c4164f2dc41bce16ea891e2e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::fromBigEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="84" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaf9b4c1e8636b0bfb1fd32e73d803a5d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::fromBigEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="90" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaff16d1a02befbc605efc0bd8eeb8a7eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::fromBigEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>fromBigEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="100" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga7fee2ac5cac51ff58f8a73b184cf0272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::toLittleEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="107" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="107" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga8ff15f8dd119979a92282b509665b6b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::toLittleEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="117" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gad789b4631e10757beea62d0b035daac1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::toLittleEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="123" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga849d72afae2d2f3fa9168ffd042ebadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::toLittleEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>toLittleEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="133" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0a3d77b988d61f170ba1f341a9731956" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t modm::toBigEndian</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="139" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaacb7d7c5041c08bf7fcf1734ef995cf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t modm::toBigEndian</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="149" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga931b548d9b9ae92409e6666f053394d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t modm::toBigEndian</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="155" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gabf818a3c3a336f65afb39f15a17785c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t modm::toBigEndian</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>toBigEndian</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" line="165" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/endianness.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <memberdef kind="variable" id="group__modm__utils_1ga203c48bdc0ee80f631cdd258b10ac2ec" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit0</definition>
        <argsstring></argsstring>
        <name>Bit0</name>
        <initializer>= (1ul &lt;&lt;  0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="24" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga6cd002ab50e9098b051162dc153a9027" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit1</definition>
        <argsstring></argsstring>
        <name>Bit1</name>
        <initializer>= (1ul &lt;&lt;  1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="25" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga321c02afc0736ac2e00e7345160ecd15" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit2</definition>
        <argsstring></argsstring>
        <name>Bit2</name>
        <initializer>= (1ul &lt;&lt;  2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="26" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gaba1b09d91059e91dfeb9f3de71d78b88" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit3</definition>
        <argsstring></argsstring>
        <name>Bit3</name>
        <initializer>= (1ul &lt;&lt;  3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="27" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga6af49a714dae4f25e5abf3651bfa78da" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit4</definition>
        <argsstring></argsstring>
        <name>Bit4</name>
        <initializer>= (1ul &lt;&lt;  4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="28" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gaaf03e0045f592f171a2b890e86362471" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit5</definition>
        <argsstring></argsstring>
        <name>Bit5</name>
        <initializer>= (1ul &lt;&lt;  5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="29" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga1e6b1e4cc43ac4e146cdc5033b594e88" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit6</definition>
        <argsstring></argsstring>
        <name>Bit6</name>
        <initializer>= (1ul &lt;&lt;  6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="30" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gaa1ac8e305f378973a4e5eb9af8c878c5" prot="public" static="no" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t modm::Bit7</definition>
        <argsstring></argsstring>
        <name>Bit7</name>
        <initializer>= (1ul &lt;&lt;  7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="31" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gaec33615d542182fef47fce64bd1bda68" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit8</definition>
        <argsstring></argsstring>
        <name>Bit8</name>
        <initializer>= (1ul &lt;&lt;  8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="32" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga622b926d825113ebd3dce00a6e4dab9b" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit9</definition>
        <argsstring></argsstring>
        <name>Bit9</name>
        <initializer>= (1ul &lt;&lt;  9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="33" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga8bccc12f46dc23d8e9dde7ebef902f7c" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit10</definition>
        <argsstring></argsstring>
        <name>Bit10</name>
        <initializer>= (1ul &lt;&lt; 10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="34" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga21a4a87d64bcb1dfbaf346a9cb1b8711" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit11</definition>
        <argsstring></argsstring>
        <name>Bit11</name>
        <initializer>= (1ul &lt;&lt; 11)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="35" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gafaece4a97c420e6a4ebe85a3ceabc1f8" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit12</definition>
        <argsstring></argsstring>
        <name>Bit12</name>
        <initializer>= (1ul &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="36" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga17e9994f5624f7ce7c5d1653e60dd3d0" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit13</definition>
        <argsstring></argsstring>
        <name>Bit13</name>
        <initializer>= (1ul &lt;&lt; 13)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="37" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga9c16d83237a5ea2541ce977ecaa8ccfe" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit14</definition>
        <argsstring></argsstring>
        <name>Bit14</name>
        <initializer>= (1ul &lt;&lt; 14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="38" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gacb3f481f5bc52c7a08cf1b710c87abf8" prot="public" static="no" mutable="no">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t modm::Bit15</definition>
        <argsstring></argsstring>
        <name>Bit15</name>
        <initializer>= (1ul &lt;&lt; 15)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="39" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gafaad0d5cd5990e8827fc3a86eb2406ac" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit16</definition>
        <argsstring></argsstring>
        <name>Bit16</name>
        <initializer>= (1ul &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="40" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gade5f68fc9cb58a187d19799042eb0757" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit17</definition>
        <argsstring></argsstring>
        <name>Bit17</name>
        <initializer>= (1ul &lt;&lt; 17)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="41" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga0fbf2302b43e9a15fe25590e0cde5ad1" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit18</definition>
        <argsstring></argsstring>
        <name>Bit18</name>
        <initializer>= (1ul &lt;&lt; 18)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="42" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga6da4ebb26f61c13d39244605c2eb198a" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit19</definition>
        <argsstring></argsstring>
        <name>Bit19</name>
        <initializer>= (1ul &lt;&lt; 19)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="43" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gab4fd232fe4cdf951354261f3a8c49dd5" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit20</definition>
        <argsstring></argsstring>
        <name>Bit20</name>
        <initializer>= (1ul &lt;&lt; 20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="44" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gafea9762eaf05b5a0472b3adb3acc058f" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit21</definition>
        <argsstring></argsstring>
        <name>Bit21</name>
        <initializer>= (1ul &lt;&lt; 21)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="45" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga5e1881d9f26e8dc474fb36b89562ae8d" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit22</definition>
        <argsstring></argsstring>
        <name>Bit22</name>
        <initializer>= (1ul &lt;&lt; 22)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="46" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga82d65d1e5f5fce8b2e86a3b9d11730a6" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit23</definition>
        <argsstring></argsstring>
        <name>Bit23</name>
        <initializer>= (1ul &lt;&lt; 23)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="47" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga11b288ca4c3081b3ced3dc2585f6c502" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit24</definition>
        <argsstring></argsstring>
        <name>Bit24</name>
        <initializer>= (1ul &lt;&lt; 24)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="48" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gaabad2869a5008b8cda28d2040dfe7a54" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit25</definition>
        <argsstring></argsstring>
        <name>Bit25</name>
        <initializer>= (1ul &lt;&lt; 25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="49" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga8c1f16ba584d2b07937045035356e570" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit26</definition>
        <argsstring></argsstring>
        <name>Bit26</name>
        <initializer>= (1ul &lt;&lt; 26)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="50" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1gae76888fcd842cb913770739d1969c272" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit27</definition>
        <argsstring></argsstring>
        <name>Bit27</name>
        <initializer>= (1ul &lt;&lt; 27)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="51" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga71a08ac0d7e3cf1f2004849d75bdaab7" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit28</definition>
        <argsstring></argsstring>
        <name>Bit28</name>
        <initializer>= (1ul &lt;&lt; 28)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="52" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga5d6600a4f72f10f0929cbb7f5165fcfd" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit29</definition>
        <argsstring></argsstring>
        <name>Bit29</name>
        <initializer>= (1ul &lt;&lt; 29)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="53" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga46eff7d0f9804d0dc18bba658b67ac59" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit30</definition>
        <argsstring></argsstring>
        <name>Bit30</name>
        <initializer>= (1ul &lt;&lt; 30)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="54" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__utils_1ga92a89a5cc50bd2b4cc805e2381bc5a11" prot="public" static="no" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::Bit31</definition>
        <argsstring></argsstring>
        <name>Bit31</name>
        <initializer>= (1ul &lt;&lt; 31)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" line="55" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/bit_constants.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__modm__architecture__assert_1gaf22c76f51642c50723ba439c5e080726" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>Abandonment</name>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726a60a3629ef6a8f991f45d7a85f2458544" prot="public">
          <name>DontCare</name>
          <initializer>= Bit0</initializer>
          <briefdescription>
<para>Do not care about failure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726afd038fc7f319e48f3115d92bf5bdbef9" prot="public">
          <name>Ignore</name>
          <initializer>= Bit1</initializer>
          <briefdescription>
<para>Safe to ignore this failure. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__assert_1ggaf22c76f51642c50723ba439c5e080726aceaa0734f0b3c738120c67344d8f3ec1" prot="public">
          <name>Fail</name>
          <initializer>= Bit2</initializer>
          <briefdescription>
<para>This failure is reason for abandonment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes abandonment type of assertions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="28" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/assert.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="group__modm__architecture__memory_1ga4ab452f5d1300a45f045af588fc25fb2" prot="public" static="no" strong="yes">
        <type>uint16_t</type>
        <name>MemoryTrait</name>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a2291ccc152726cc20596b2285652d62c" prot="public">
          <name>AccessSBus</name>
          <initializer>= Bit0</initializer>
          <briefdescription>
<para>Memory is accessible via System-Bus. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2aed8b74346d3c30eb0bfba02ea1668d5a" prot="public">
          <name>AccessDBus</name>
          <initializer>= Bit1</initializer>
          <briefdescription>
<para>Memory is accessible via Data-Bus. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2ac98de80f4a69b523be5ea5ca459cfde0" prot="public">
          <name>AccessIBus</name>
          <initializer>= Bit2</initializer>
          <briefdescription>
<para>Memory is accessible via Instruction-Bus. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a1416ef8ef2a4f38fdd03331f0698e60e" prot="public">
          <name>AccessDMA</name>
          <initializer>= Bit3</initializer>
          <briefdescription>
<para>Memory is accessible via DMA. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a9ccbe929604e239e1504859b6e33ac1f" prot="public">
          <name>AccessDMA2D</name>
          <initializer>= Bit4</initializer>
          <briefdescription>
<para>Memory is accessible via 2D DMA. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2aeef51bb2d1e7149e4566bd16de722868" prot="public">
          <name>TypeCoreCoupled</name>
          <initializer>= Bit13</initializer>
          <briefdescription>
<para>Memory is coupled closely to the core. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2af2d06005be47e5ee3d4c34c005bc04f1" prot="public">
          <name>TypeNonVolatile</name>
          <initializer>= Bit14</initializer>
          <briefdescription>
<para>Memory is non-volatile (battery-backed) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2acefab87526157a6bad0e9f4af729c61b" prot="public">
          <name>TypeExternal</name>
          <initializer>= Bit15</initializer>
          <briefdescription>
<para>Memory is external RAM. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Describes access and type of dynamic memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="28" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="26" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="group__modm__io_1ga1dba65d23c24229cfe3c9af7912a566f" prot="public" static="no" strong="yes">
        <type></type>
        <name>IOBuffer</name>
        <enumvalue id="group__modm__io_1gga1dba65d23c24229cfe3c9af7912a566fa8460a7bd968d7951d287d235476ecf5c" prot="public">
          <name>DiscardIfFull</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__io_1gga1dba65d23c24229cfe3c9af7912a566fa392e50b6c46c40be433f3a68a9b414a2" prot="public">
          <name>BlockIfFull</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The preferred behavior when the <ref refid="classmodm_1_1_i_o_device" kindref="compound">IODevice</ref> buffer is full </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iodevice_wrapper.hpp" line="29" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/io/iodevice_wrapper.hpp" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="group__modm__processing__timer_1ga619927ca5dffdb82e1c77b41941d63cd" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>PeriodicTimerState</name>
        <enumvalue id="group__modm__processing__timer_1gga619927ca5dffdb82e1c77b41941d63cdac23e2b09ebe6bf4cb5e2a9abe85c0be2" prot="public">
          <name>Stopped</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__processing__timer_1gga619927ca5dffdb82e1c77b41941d63cda24fe48030f7d3097d5882535b04c3fa8" prot="public">
          <name>Expired</name>
          <initializer>= 0b010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__processing__timer_1gga619927ca5dffdb82e1c77b41941d63cdadb4e3578582cd2cd9c679eef11172d83" prot="public">
          <name>Armed</name>
          <initializer>= 0b100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible states of a timer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" line="28" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="group__modm__processing__timer_1gacc7987b8fe7071d9cd993829ee005298" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>TimeoutState</name>
        <enumvalue id="group__modm__processing__timer_1ggacc7987b8fe7071d9cd993829ee005298ac23e2b09ebe6bf4cb5e2a9abe85c0be2" prot="public">
          <name>Stopped</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__processing__timer_1ggacc7987b8fe7071d9cd993829ee005298a24fe48030f7d3097d5882535b04c3fa8" prot="public">
          <name>Expired</name>
          <initializer>= 0b010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__modm__processing__timer_1ggacc7987b8fe7071d9cd993829ee005298adb4e3578582cd2cd9c679eef11172d83" prot="public">
          <name>Armed</name>
          <initializer>= 0b100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible states of a timeout </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" line="30" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" bodystart="28" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__modm__architecture__assert_1ga7737b85c4054dc754b61bf0da7c165fe" prot="public" static="no">
        <type><ref refid="group__modm__architecture__assert_1gaf22c76f51642c50723ba439c5e080726" kindref="member">Abandonment</ref>(*)(const char *module, const char *location, const char *failure, uintptr_t context)</type>
        <definition>using modm::AssertionHandler = typedef Abandonment (*)(const char * module, const char * location, const char * failure, uintptr_t context)</definition>
        <argsstring></argsstring>
        <name>AssertionHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature of the assertion handlers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/assert.hpp" line="36" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/assert.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" prot="public" static="no">
        <type><ref refid="group__modm__architecture__register_1ga5cddf799f2474c0da233eeb750474b18" kindref="member">Flags16</ref>&lt; <ref refid="group__modm__architecture__memory_1ga4ab452f5d1300a45f045af588fc25fb2" kindref="member">MemoryTrait</ref> &gt;</type>
        <definition>using modm::MemoryTraits = typedef Flags16&lt;MemoryTrait&gt;</definition>
        <argsstring></argsstring>
        <name>MemoryTraits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A memory can have multiple traits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="45" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1ga3d265ef7be475824993d2f3f38e0abec" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_periodic_timer" kindref="compound">GenericPeriodicTimer</ref>&lt; ::<ref refid="classmodm_1_1_clock" kindref="compound">modm::Clock</ref>, <ref refid="group__modm__processing__timer_1ga842ffd54d7e497f11c85118cd2a52570" kindref="member">ShortTimestamp</ref> &gt;</type>
        <definition>using modm::ShortPeriodicTimer = typedef GenericPeriodicTimer&lt; ::modm::Clock, ShortTimestamp&gt;</definition>
        <argsstring></argsstring>
        <name>ShortPeriodicTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Periodic software timer for up to 32 seconds with millisecond resolution.</para><para>Extra care must be taken when not calling the isExpired() method for more than 32 seconds. Due to an overflow in the implementation this might add an additional delay of up to 32s ticks in the worst case. Always call restart() or restart(time) before reusing the timer to avoid this behaviour.</para><para>If you need a longer time period, use PeriodicTimer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" line="105" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1gafd9875f046c1bd3358612162e7ad8839" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_periodic_timer" kindref="compound">GenericPeriodicTimer</ref>&lt; ::<ref refid="classmodm_1_1_clock" kindref="compound">modm::Clock</ref>, <ref refid="group__modm__processing__timer_1ga8f3b60fc7930db595007904dc1e2090d" kindref="member">Timestamp</ref> &gt;</type>
        <definition>using modm::PeriodicTimer = typedef GenericPeriodicTimer&lt; ::modm::Clock, Timestamp&gt;</definition>
        <argsstring></argsstring>
        <name>PeriodicTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Periodic software timer for up to 24 days with millisecond resolution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" line="109" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/periodic_timer.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1ga5942cb6169725e55e37487efc326851b" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_timeout" kindref="compound">GenericTimeout</ref>&lt; ::<ref refid="classmodm_1_1_clock" kindref="compound">modm::Clock</ref>, <ref refid="group__modm__processing__timer_1ga842ffd54d7e497f11c85118cd2a52570" kindref="member">ShortTimestamp</ref> &gt;</type>
        <definition>using modm::ShortTimeout = typedef GenericTimeout&lt; ::modm::Clock, ShortTimestamp&gt;</definition>
        <argsstring></argsstring>
        <name>ShortTimeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Software timeout for up to 32 seconds with millisecond resolution.</para><para>Extra care must be taken when not calling the isExpired() method for more than 32 seconds. Due to an overflow in the implementation this might add an additional delay of up to 32s ticks in the worst case. Always call restart(time) before reusing the timer to avoid this behaviour.</para><para>If you need a longer time period, use Timeout. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" line="134" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1ga527fc57fdfcde22d06c2c1b913ec4d58" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_timeout" kindref="compound">GenericTimeout</ref>&lt; ::<ref refid="classmodm_1_1_clock" kindref="compound">modm::Clock</ref>, <ref refid="group__modm__processing__timer_1ga8f3b60fc7930db595007904dc1e2090d" kindref="member">Timestamp</ref> &gt;</type>
        <definition>using modm::Timeout = typedef GenericTimeout&lt; ::modm::Clock, Timestamp&gt;</definition>
        <argsstring></argsstring>
        <name>Timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Software timeout for up to 24 days with millisecond resolution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" line="138" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timeout.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1ga842ffd54d7e497f11c85118cd2a52570" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_timestamp" kindref="compound">GenericTimestamp</ref>&lt; uint16_t &gt;</type>
        <definition>using modm::ShortTimestamp = typedef GenericTimestamp&lt;uint16_t&gt;</definition>
        <argsstring></argsstring>
        <name>ShortTimestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>16bit timestamp, which can hold up to 65 seconds at millisecond resolution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" line="114" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__modm__processing__timer_1ga8f3b60fc7930db595007904dc1e2090d" prot="public" static="no">
        <type><ref refid="classmodm_1_1_generic_timestamp" kindref="compound">GenericTimestamp</ref>&lt; uint32_t &gt;</type>
        <definition>using modm::Timestamp = typedef GenericTimestamp&lt;uint32_t&gt;</definition>
        <argsstring></argsstring>
        <name>Timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>32bit timestamp, which can hold up to 49 days at millisecond resolution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" line="118" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__arithmetic__traits_1ga4aa9b205cd091d24be9d4b873a91d6f5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename detail::WideType&lt; T &gt;::type</type>
        <definition>using modm::WideType = typedef typename detail::WideType&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>WideType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/arithmetic_traits.hpp" line="183" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/arithmetic_traits.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__modm__architecture__memory_1ga475ac526f7987ec505c03afd684185f5" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryFastCode</definition>
        <argsstring></argsstring>
        <name>MemoryFastCode</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2ac98de80f4a69b523be5ea5ca459cfde0" kindref="member">MemoryTrait::AccessIBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2aeef51bb2d1e7149e4566bd16de722868" kindref="member">MemoryTrait::TypeCoreCoupled</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fast code memory is accessible by at least the I-Bus and it is core-coupled. Fallback memory on exhaustion is not core-coupled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="51" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1ga1d786bf0457f54b3bde696161c7d0715" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryFastData</definition>
        <argsstring></argsstring>
        <name>MemoryFastData</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2aed8b74346d3c30eb0bfba02ea1668d5a" kindref="member">MemoryTrait::AccessDBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2aeef51bb2d1e7149e4566bd16de722868" kindref="member">MemoryTrait::TypeCoreCoupled</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fast data memory is accessible by at least the D-Bus and it is core coupled. Fallback memory on exhaustion is not core-coupled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="55" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1ga4943c1af3733c164aa541dffa7972019" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryDMA</definition>
        <argsstring></argsstring>
        <name>MemoryDMA</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a2291ccc152726cc20596b2285652d62c" kindref="member">MemoryTrait::AccessSBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a1416ef8ef2a4f38fdd03331f0698e60e" kindref="member">MemoryTrait::AccessDMA</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DMA-able memory is accessible by at least the S-Bus and DMA. There is no fallback memory on exhaustion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="60" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1gac74d8199f23144e2af47e9ccf72f5a78" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryDMA2D</definition>
        <argsstring></argsstring>
        <name>MemoryDMA2D</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a2291ccc152726cc20596b2285652d62c" kindref="member">MemoryTrait::AccessSBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a9ccbe929604e239e1504859b6e33ac1f" kindref="member">MemoryTrait::AccessDMA2D</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DMA-able memory is accessible by at least the S-Bus and 2D DMA. There is no fallback memory on exhaustion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="64" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1gab4a17216559951bcee7bca4115ffc0f3" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryExternal</definition>
        <argsstring></argsstring>
        <name>MemoryExternal</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a2291ccc152726cc20596b2285652d62c" kindref="member">MemoryTrait::AccessSBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2acefab87526157a6bad0e9f4af729c61b" kindref="member">MemoryTrait::TypeExternal</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>External memory is accessible by at least the S-Bus and it is external. Fallback memory on exhaustion is internal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="69" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1ga8c685b0abc10fbae2b743a12c46b5599" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryBackup</definition>
        <argsstring></argsstring>
        <name>MemoryBackup</name>
        <initializer>= (<ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2a2291ccc152726cc20596b2285652d62c" kindref="member">MemoryTrait::AccessSBus</ref> | <ref refid="group__modm__architecture__memory_1gga4ab452f5d1300a45f045af588fc25fb2af2d06005be47e5ee3d4c34c005bc04f1" kindref="member">MemoryTrait::TypeNonVolatile</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Backup memory is accessible by at least the S-Bus and it is non-volatile. There is no fallback memory on exhaustion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="73" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__modm__architecture__memory_1ga08155d1288c3fd230809c6bffb2df227" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="group__modm__architecture__memory_1ga5479d542cc0b8c0a291e61e4cec9199f" kindref="member">MemoryTraits</ref></type>
        <definition>constexpr MemoryTraits modm::MemoryDefault</definition>
        <argsstring></argsstring>
        <name>MemoryDefault</name>
        <initializer>= <ref refid="group__modm__architecture__memory_1ga4943c1af3733c164aa541dffa7972019" kindref="member">MemoryDMA</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default memory is DMA-able. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" line="77" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/memory.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemodm_1aec9a27daba54314a860c714c611db4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;stream, const Can::BusState state)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_can_1a0914c89eaf4b5f5f8a302c7fc18b2a1e" kindref="member">Can::BusState</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/can.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__delay_1gac74a1138fd586eafa8cd4c1928f4ccab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::delayNanoseconds</definition>
        <argsstring>(uint16_t ns)</argsstring>
        <name>delayNanoseconds</name>
        <param>
          <type>uint16_t</type>
          <declname>ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spin for nanoseconds. This function is implemented as best-effort and its resolution will be very coarse especially on platforms with very slow clocks. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/delay.hpp" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__delay_1ga03e5053cd9552409229bec06accb44b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::delayMicroseconds</definition>
        <argsstring>(uint16_t us)</argsstring>
        <name>delayMicroseconds</name>
        <param>
          <type>uint16_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spin for microseconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/delay.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__delay_1gacf0606c81a2e71403a44a768b16e5268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::delayMilliseconds</definition>
        <argsstring>(uint16_t ms)</argsstring>
        <name>delayMilliseconds</name>
        <param>
          <type>uint16_t</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spin for milliseconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/delay.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1af514f7f31e849247fd759cae0d641642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;s, const modm::I2c::Operation op)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structmodm_1_1_i2c_1a768a0860e730f40db13d750648eb42ad" kindref="member">modm::I2c::Operation</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/i2c.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1a666cd54b8a68da34d49dc4ed0c1aac73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;s, const modm::I2c::OperationAfterStart op)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structmodm_1_1_i2c_1ae92dc2a408c98192b77d0702fd18350d" kindref="member">modm::I2c::OperationAfterStart</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/i2c.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1a62b18dcf6a8961133b322f90c3127a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;s, const modm::I2c::OperationAfterRead op)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structmodm_1_1_i2c_1a9b3a80feb3a8f179706ee1d5afe8bb31" kindref="member">modm::I2c::OperationAfterRead</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/i2c.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1a8dd7d284c829b485675446c43c88d23d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;s, const modm::I2c::OperationAfterWrite op)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structmodm_1_1_i2c_1aec4012822851f4abbe0ed0dc03c24cbb" kindref="member">modm::I2c::OperationAfterWrite</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/i2c.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__architecture__unaligned_1ga452f44a964c3bcaa351e12ea8d74800e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="structmodm_1_1unaligned__t" kindref="compound">unaligned_t</ref>&lt; T &gt; *</type>
        <definition>unaligned_t&lt;T&gt;* modm::asUnaligned</definition>
        <argsstring>(U *value)</argsstring>
        <name>asUnaligned</name>
        <param>
          <type>U *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accesses a memory location using a unaligned-safe method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/unaligned.hpp" line="69" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/interface/unaligned.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1a8da458774cdb0f36cf3251e652bb9651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
        <definition>modm::IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(modm::IOStream &amp;s, const modm::SmartPointer &amp;sPtr)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">modm::IOStream</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_smart_pointer" kindref="compound">modm::SmartPointer</ref> &amp;</type>
          <declname>sPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/container/smart_pointer.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaec13941291730157912e182afefe1be0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool modm::isPositive</definition>
        <argsstring>(const float &amp;a)</argsstring>
        <name>isPositive</name>
        <param>
          <type>const float &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fast check if a float variable is positive</para><para>Checks only the sign bit for the AVR. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="36" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga5df53b0ad92fb8fa06b5dc17a16b1ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t modm::pow</definition>
        <argsstring>(uint32_t base, uint8_t exponent)</argsstring>
        <name>pow</name>
        <param>
          <type>uint32_t</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile time and runtime exponentiation</para><para>Calculates base raised to the power of exponent. If base and exponent are compile-time constants, the results is calculated at compile time. Otherwise the result is computed at runtime, which might be very expensive.</para><para><programlisting><codeline><highlight class="normal">constexpr<sp/>int<sp/>value<sp/>=<sp/>modm::pow(10,<sp/>2);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="55" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga0911b63c9be749d20800b5f99fb6d4a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lesser of the parameters.</para></simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="73" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga222358293aace9c4f19a45cb3850f8ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the parameters.</para></simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="94" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1gaa89d150ac3c4c69a60307dd6c39f9c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T modm::max</definition>
        <argsstring>(const T a, const T b, const T c)</argsstring>
        <name>max</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Something else of arbitrary type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the three parameters.</para></simplesect>
This is the simple classic generic implementation. It will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="116" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga63941abd87426c326fd3d968c2fd2256" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b, Compare compare)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>A comparison functor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The lesser of the parameters.</para></simplesect>
This will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="135" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__math__utils_1ga2a4606035f3c0e99d2bf894251b81b04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; modm::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b, Compare compare)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>compare</declname>
        </param>
        <briefdescription>
<para>This does what you think it does. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>A thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Another thing of arbitrary type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare</parametername>
</parameternamelist>
<parameterdescription>
<para>A comparison functor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The greater of the parameters.</para></simplesect>
This will work on temporary expressions, since they are only evaluated once, unlike a preprocessor macro. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" line="156" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/math/utils/misc.hpp" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacemodm_1a739f5a0e5096e70586eacd3771363444" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
        <definition>IOStream&amp; modm::operator&lt;&lt;</definition>
        <argsstring>(IOStream &amp;os, const GenericTimestamp&lt; T &gt; &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classmodm_1_1_i_o_stream" kindref="compound">IOStream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classmodm_1_1_generic_timestamp" kindref="compound">GenericTimestamp</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" line="122" column="1" bodyfile="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/processing/timer/timestamp.hpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__modm__utils_1gac9a2e3b1c445ec26b3a24543db1731dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modm::dummy</definition>
        <argsstring>()</argsstring>
        <name>dummy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dummy function for default function pointers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/utils/dummy.hpp" line="26" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="C:/Users/jakob/OneDrive/Dokumenter/GitHub/software-dolken/modm/src/modm/architecture/driver/atomic/container.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>
